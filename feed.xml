<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-06-04T02:46:16+05:30</updated><id>/feed.xml</id><entry><title type="html">Semantic versioning rules for software management</title><link href="/2020/05/29/Semantic-versioning-rules-for-software-management.html" rel="alternate" type="text/html" title="Semantic versioning rules for software management" /><published>2020-05-29T00:00:00+05:30</published><updated>2020-05-29T00:00:00+05:30</updated><id>/2020/05/29/Semantic-versioning-rules-for-software-management</id><content type="html" xml:base="/2020/05/29/Semantic-versioning-rules-for-software-management.html">&lt;div class=&quot;box&quot;&gt;
&lt;img src=&quot;/assets/images/Git/gitLogo.svg&quot; alt=&quot;Git-logo&quot; width=&quot;150px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://semver.org/&quot;&gt;Semantic versioning&lt;/a&gt; rules to update a software at a version &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR.MINOR.PATCH&lt;/code&gt; recommend&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;incrementing &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version when you make incompatible API changes&lt;/li&gt;
  &lt;li&gt;incrementing &lt;code class=&quot;highlighter-rouge&quot;&gt;MINOR&lt;/code&gt; version when you add functionality in a backwards compatible manner&lt;/li&gt;
  &lt;li&gt;incrementing &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; version when you make backwards compatible bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Software development is a multi user multi platform multi-organization endeavour. Each piece of program depends on other libraries.
Just as a program goes through iterative process of development, the dependencies undergo their own cycles of development. Lets say we develop a &lt;code class=&quot;highlighter-rouge&quot;&gt;program P&lt;/code&gt; that provides a &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin p1&lt;/code&gt;. Let this be the current &lt;code class=&quot;highlighter-rouge&quot;&gt;version x&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;program P&lt;/code&gt; and denote it by &lt;code class=&quot;highlighter-rouge&quot;&gt;P(x)&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;P(x)&lt;/code&gt; depends on the current &lt;code class=&quot;highlighter-rouge&quot;&gt;version y&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;library L&lt;/code&gt;. Let us denoted this version of &lt;code class=&quot;highlighter-rouge&quot;&gt;library L&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;L(y)&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;L(x)&lt;/code&gt; has certain &lt;strong&gt;functionalities&lt;/strong&gt; like &lt;code class=&quot;highlighter-rouge&quot;&gt;f1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;f2&lt;/code&gt;, of which &lt;code class=&quot;highlighter-rouge&quot;&gt;p1&lt;/code&gt; needs &lt;code class=&quot;highlighter-rouge&quot;&gt;f1&lt;/code&gt;. So we build on top of the API of the &lt;code class=&quot;highlighter-rouge&quot;&gt;L(x)&lt;/code&gt; by using only &lt;code class=&quot;highlighter-rouge&quot;&gt;f1&lt;/code&gt; in our program &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So far so good. However in the course of time, we progress with our development and add an extra &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin p2&lt;/code&gt; to our &lt;code class=&quot;highlighter-rouge&quot;&gt;program P&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;p2&lt;/code&gt; depends on both &lt;code class=&quot;highlighter-rouge&quot;&gt;f1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;f2&lt;/code&gt;. Parallelly, the developers of &lt;code class=&quot;highlighter-rouge&quot;&gt;library L&lt;/code&gt; have iterated through their own cycle of development. In the latest iteration, they improved implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;f1&lt;/code&gt; keeping the interface to &lt;code class=&quot;highlighter-rouge&quot;&gt;f1&lt;/code&gt; unaltered. However, they realized that &lt;code class=&quot;highlighter-rouge&quot;&gt;f2&lt;/code&gt; needs a reformation of the interface also. Additionally they developed a new &lt;code class=&quot;highlighter-rouge&quot;&gt;functionality f3&lt;/code&gt; and released these improvements in their latest &lt;code class=&quot;highlighter-rouge&quot;&gt;version ( y + 1 )&lt;/code&gt;. Let us denote this version by &lt;code class=&quot;highlighter-rouge&quot;&gt;L( y + 1 )&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now there are two impending questions here. The first question is how does the &lt;code class=&quot;highlighter-rouge&quot;&gt;library L&lt;/code&gt; developer community communicates to their users of their new changes. The second question is how does the &lt;code class=&quot;highlighter-rouge&quot;&gt;program P&lt;/code&gt; community go about adopting the latest version &lt;code class=&quot;highlighter-rouge&quot;&gt;L( y + 1 )&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One way to address the first question is  through extensive documentation of the new version so that that application developers can go through the documentation and take note of the changes and accordingly take the decision of migrating to the newer version of the &lt;code class=&quot;highlighter-rouge&quot;&gt;dependency L&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;However developers are poor documenters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead, a set of rules evolved with the community to convey quickly what might have possibly changed in the new version. This collection of rules for versioning software is called &lt;strong&gt;semantic versioning&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The second question is what leads to the possibility of &lt;strong&gt;software dependency hell&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;semantic-versioning&quot;&gt;Semantic Versioning&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://semver.org/&quot;&gt;Semantic versioning&lt;/a&gt; is a way to avoid what is commonly called the &lt;strong&gt;software dependency hell&lt;/strong&gt;. Software dependency hell swings the choice of upgrading software between two limiting scenarios.&lt;/p&gt;

&lt;h3 id=&quot;dependency-hell-spectrum--version-locking-vs-version-promiscuity&quot;&gt;Dependency hell spectrum : Version locking vs version promiscuity&lt;/h3&gt;
&lt;p&gt;At the one end of what is called as &lt;strong&gt;version locking&lt;/strong&gt;, the developer community of program P makes a choice to upgrade P without depending on the latest version of &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; as the interface of &lt;code class=&quot;highlighter-rouge&quot;&gt;functionality f2&lt;/code&gt; has changed and would break the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin p2&lt;/code&gt;. By version locking of the &lt;code class=&quot;highlighter-rouge&quot;&gt;dependency L&lt;/code&gt;, we loose out on the performance improvements of &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin p1&lt;/code&gt; as the latest version of L has improved version of &lt;code class=&quot;highlighter-rouge&quot;&gt;functionality f1&lt;/code&gt; on which &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin p1&lt;/code&gt; depends. It does not mean the &lt;code class=&quot;highlighter-rouge&quot;&gt;program P&lt;/code&gt; cannot be upgraded. The latest version &lt;code class=&quot;highlighter-rouge&quot;&gt;p( x + 1)&lt;/code&gt; can contain &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin p2&lt;/code&gt; with dependency &lt;code class=&quot;highlighter-rouge&quot;&gt;L(y)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the other end of the spectrum of dependency hell, the developer community decides to upgrade P by depending on the latest version &lt;code class=&quot;highlighter-rouge&quot;&gt;L( y + 1 )&lt;/code&gt; to gain the performance improvement of &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin p1&lt;/code&gt; (as there is improvement of &lt;code class=&quot;highlighter-rouge&quot;&gt;functionality f1&lt;/code&gt; on which &lt;code class=&quot;highlighter-rouge&quot;&gt;p1&lt;/code&gt; depends) even at the cost of &lt;strong&gt;breaking&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin p2&lt;/code&gt;. Additionally there is a possiblity of developing a new &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin p3&lt;/code&gt; that might use &lt;code class=&quot;highlighter-rouge&quot;&gt;functionality f3&lt;/code&gt;. The possibility of breaking code might seriously affect the end user of the program and this sort of upgradation of software comes under what is called as &lt;strong&gt;version promiscuity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Either ends of the spectrum are harmful to software development. To choose a middle path, semantic versioning helps one take an informed judgement on if and when to upgrade software.&lt;/p&gt;

&lt;h3 id=&quot;semantic-versioning-specification&quot;&gt;Semantic versioning specification&lt;/h3&gt;

&lt;p&gt;The developer community over the course of years have come up with a set of rules on how to version their individual softwares so that software interdependency can be resolved in a sane way. A typical iteration of software development involves three steps&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;feature enhancement&lt;/li&gt;
  &lt;li&gt;feature testing&lt;/li&gt;
  &lt;li&gt;feature release or shipping&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;feature-enhancement&quot;&gt;Feature enhancement&lt;/h4&gt;

&lt;p&gt;The semantic versioning rules are closely associated with these steps. A feature enhancement can be of type &lt;strong&gt;MAJOR&lt;/strong&gt; like a rework on the Application Programmer’s Interface(API). This needs to send alarm bells to the users of this API as their programs will not be compatible with this new API. As a result this enhancement is called being &lt;strong&gt;backwards incompatible&lt;/strong&gt;. A feature enhancement can be of type &lt;strong&gt;MINOR&lt;/strong&gt; like adding new functionality without breaking existing API. This enhancement is called being &lt;strong&gt;backwards compatible&lt;/strong&gt;. This feature may improve implementation of existing functionality or be a complete new functionality in which case it &lt;strong&gt;adds to the API&lt;/strong&gt; and at the same is being backwards compatible. A third type of feature enhancement is fixing bugs. A bug is a wrong implementation of a feature leading to erroneous behaviour of the program using the API. An enhancement  that fixes bugs is called a &lt;strong&gt;PATCH&lt;/strong&gt;. A patch neither improves existing functionality nor adds new functionality. It only corrects/fixes existing functionality.&lt;/p&gt;

&lt;p&gt;The above is for a particular iteration of the development of the program. To capture the entire timeline of the development, the type of feature enhancements ever done are coded in the &lt;strong&gt;version&lt;/strong&gt; of software with a format &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR.MINOR.PATCH&lt;/code&gt; of dot separated numerical identifiers for &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MINOR&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt;. Each of these numerical identifiers are whole numbers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;With every iteration of the development, depending on the type of feature enhancement carried out, the corresponding identifier is incremented by 1 and is called a &lt;strong&gt;release&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, let the current version of &lt;code class=&quot;highlighter-rouge&quot;&gt;program P&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;v1.0.0&lt;/code&gt; and current version of &lt;code class=&quot;highlighter-rouge&quot;&gt;library L&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;v1.1.2&lt;/code&gt;. This means till now there has been one API release for L and followed by 1 minor release of backwards compatible enhancements in the functionalities followed by 2 releases of bug fixes. Similarly program P has only a major release after which there is no further development. However nothing is known of previous major releases and its sub releases of minors and patches.&lt;/p&gt;

&lt;p&gt;It should be noted that once a version is released, there is no going back. At the most, one can do a bug fix for the release in future.&lt;/p&gt;

&lt;h4 id=&quot;feature-testing&quot;&gt;Feature testing&lt;/h4&gt;

&lt;p&gt;The above releases are called &lt;strong&gt;normal releases&lt;/strong&gt; or &lt;strong&gt;stable releases&lt;/strong&gt;. Since version releases are only forward directional, developers of large projects &lt;strong&gt;pre-release&lt;/strong&gt; a software prior to the actual release. The reason is two fold;to let the common user know that they are &lt;strong&gt;unstable&lt;/strong&gt; and therefore stay away from it as they can potentially break the global system like the Operating system and what not. These release are intended for power users in the hope that they fish out remaining bugs. Pre-release is distinguished from a normal release by suffixing terms like &lt;strong&gt;alpha&lt;/strong&gt;, &lt;strong&gt;beta&lt;/strong&gt;, &lt;strong&gt;rc&lt;/strong&gt; with a hyphen.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alpha pre-release may not contain all the features planned for the final release, but at the end of the alpha phase, the software is feature complete. Proprietary software do not release their alpha-pre releases to the general public unlike open source software.&lt;/li&gt;
  &lt;li&gt;Beta pre-relase phase starts with feature complete software but has bugs. This is pre-released in the open source community for bug testing.&lt;/li&gt;
  &lt;li&gt;Release candidate (rc) pre-release has the potential to be &lt;strong&gt;stable&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more info, check this &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_release_life_cycle#Pre-alpha&quot;&gt;Wikipedia article on Software release life cycle&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;feature-release&quot;&gt;Feature release&lt;/h3&gt;

&lt;p&gt;Once there is reasonable certainty that the pre-releases are stable, they are released with versioning following the rules of semantic versioning.&lt;/p&gt;

&lt;h3 id=&quot;precedence-of-versions&quot;&gt;Precedence of versions&lt;/h3&gt;

&lt;p&gt;When comparing releases with respect to the time ordering of the releases, the precedence is calculated by comparing separately the major, minor, and path and pre-release identifiers.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1.x.y &amp;lt; 2.p.q for any x, y, p, q&lt;/li&gt;
  &lt;li&gt;1.0.y &amp;lt; 1.1.q for any y, q&lt;/li&gt;
  &lt;li&gt;1.0.0-&lt;pre-release&gt; &amp;lt; 1.0.0&lt;/pre-release&gt;&lt;/li&gt;
  &lt;li&gt;1.0.0-alpha &amp;lt; 1.0.0-beta &amp;lt; 1.0.0-rc&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-concrete-example-of-inkscape-development&quot;&gt;A concrete example of Inkscape development&lt;/h2&gt;

&lt;p&gt;Inkscape is a mature project with a history of more than 16 years. The current release as of 29th of May, 2020 is 1.0.0. Prior versions were of the type 0.x.y&lt;/p&gt;

&lt;p&gt;The major version increment means there is some backwards incompatible. From the &lt;a href=&quot;https://wiki.inkscape.org/wiki/index.php?title=Release_notes/1.0#python3&quot;&gt;Inkscape v1.0.0 release documentation&lt;/a&gt;, it is clear that Inkscape has migrated to using GTK+3. Earlier v0.x.y versions were using GTK+2. GTK (Gimp Tool Kit) is a widget based took kit for creating graphical user interfaces. However the major version increment is not due to shifting to GTK+3, but it is due to backwards incompatible SVG?? (I dont know what that means) I think it means that SVG standard has upgraded itself. To incorporate the newer SVG standard, Inkscapes API has been modified (remember that Inkscape provides a command line mode.. so in effect inkscape can be used as an API as in for Inkscape extensions!!!)&lt;/p&gt;

&lt;hr /&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">We will describe the rules for versioning software to avoid dependency hell</summary></entry><entry><title type="html">References for learning C++</title><link href="/2020/05/24/C++-definitive-references.html" rel="alternate" type="text/html" title="References for learning C++" /><published>2020-05-24T00:00:00+05:30</published><updated>2020-05-24T00:00:00+05:30</updated><id>/2020/05/24/C++-definitive-references</id><content type="html" xml:base="/2020/05/24/C++-definitive-references.html">&lt;div class=&quot;box&quot;&gt;
&lt;img src=&quot;/assets/images/C++/C++Logo.png&quot; alt=&quot;C++-logo&quot; width=&quot;150px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;Programming is a science as well as an art. Developing the required skills takes time and effort and an enthusiasm to learn. The learning draws parallels with that of learning a natural language such as English.
Just as the required skills to learn a natural language are reading, listening, writing and speaking, so the skills for learning a programming language are reading code, writing code. Also just as we need to know the proper language constructs like grammar (syntax), contextual use of language (semantics), we need to learn the syntax as well as&lt;/p&gt;

&lt;h3 id=&quot;sites&quot;&gt;Sites&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.learncpp.com/&quot;&gt;Learncpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs-fundamentals.com/&quot;&gt;CS fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;books&quot;&gt;Books&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;SO Book Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mhhe.com/engcs/proglang/cohoon/&quot;&gt;C++ Program Design by Cohoon and Davidson&lt;/a&gt; I refered to this book for my CS101 course in 2005&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goalkicker.com/CPlusPlusBook/&quot;&gt;C++ Notes for Professionals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pearson.com/us/higher-education/program/Deitel-C-How-to-Program-Plus-My-Lab-Programming-with-Pearson-e-Text-Access-Card-Package-10th-Edition/PGM1100513.html&quot;&gt;C++ How to Program by Deitel and Deitel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Like learning natural language involves listening as a major component, programming language skills are developed by reading lots of good code. It exposes the learner to good programming practices.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codewithc.com/c-projects-with-source-code/&quot;&gt;Code with C/C++&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Baalkikhaal/project-based-learning#cc&quot;&gt;Curated list of programming projects&lt;/a&gt; Language agnostic projects to improve the programming skills using project based learning&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://projecteuler.net/about&quot;&gt;Project Euler&lt;/a&gt; Weekly addition of a new problem that demands skills in mathematics and programming. A fun way to start learning programming and mathematics in a hand-in-glove manner.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;libraries&quot;&gt;Libraries&lt;/h3&gt;

&lt;p&gt;Some famous libraries that help in learning how APIs are written. By reading their source code, one can learn how good programmers structure their code and also how to abstract functionality so that code has increased reusability quotient.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://glm.g-truc.net/0.9.9/index.html&quot;&gt;OpenGLM&lt;/a&gt; OpenGL Mathematics (GLM) is a header only C++ mathematics library for graphics software.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.libsdl.org/index.php&quot;&gt;SDL2&lt;/a&gt; Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.netlib.org/blas/&quot;&gt;BLAS&lt;/a&gt; Basic Linear Algebra Subroutines are &lt;strong&gt;Fortran&lt;/strong&gt; routines that provide basic building blocks for basic vector and matrix operations. There is a C/C++ interface.
    &lt;ul&gt;
      &lt;li&gt;Level-1 BLAS performs scalar, vector and vector-vector operations,&lt;/li&gt;
      &lt;li&gt;Level-2 BLAS performs matrix-vector operations,&lt;/li&gt;
      &lt;li&gt;Level-3 BLAS performs matrix-matrix operations.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.netlib.org/lapack/&quot;&gt;LAPACK&lt;/a&gt; Linear Algebra PACKage utilizes BLAS subroutines to provide routines for solving systems of simultaneous linear equations, least-squares solutions of linear systems of equations, eigenvalue problems, and singular value problems. The associated matrix factorizations (LU, Cholesky, QR, SVD, Schur, generalized Schur) are also provided. There is a C/C++ interface.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.opengl.org/&quot;&gt;OpenGL&lt;/a&gt; The Industry’s Foundation for High Performance Graphics&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opencv.org/&quot;&gt;OpenCV&lt;/a&gt; (Open Source Computer Vision library)
is an open source computer vision and machine learning software library. OpenCV was built to provide a common infrastructure for computer vision applications and to accelerate the use of machine perception in the commercial products.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;hands-on-tutorials&quot;&gt;Hands on Tutorials&lt;/h2&gt;
&lt;p&gt;Following are hands on tutorials for various aspects of program development. As a typical cycle of program development involves&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;writing source code&lt;/li&gt;
  &lt;li&gt;compiling the code&lt;/li&gt;
  &lt;li&gt;debugging the code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;writing-cc-program-todo&quot;&gt;Writing C/C++ program (#TODO)&lt;/h3&gt;

&lt;p&gt;Tutorials explaining good programming practices while writing code are given here. Some esoteric aspects of writing good code, which I cannot at the current moment categorize them due to my own lack of understanding, are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;avoiding hard coding&lt;/li&gt;
  &lt;li&gt;practing a convention for writing code. Though there is no C++ standard for writing the code, in order for the code to be readable, we need to adopt one convention and stick. There is no universal convention. Some adopt the Hungarian convention for the brackets, what is the other one I dont have idea. A &lt;a href=&quot;https://lazyfoo.net/articles/article02/index.php&quot;&gt;LazyFoo article on writing readable code&lt;/a&gt; and an &lt;a href=&quot;https://inkscape.org/develop/coding-style/&quot;&gt;article on coding style for Inkscape project&lt;/a&gt; are starters.
    &lt;ul&gt;
      &lt;li&gt;properly indent code&lt;/li&gt;
      &lt;li&gt;give descriptive names to the variables&lt;/li&gt;
      &lt;li&gt;Develop a naming standard&lt;/li&gt;
      &lt;li&gt;Properly comment your code&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;refactoring (not sure what that means… however most of the Inkscape legacy code is undergoing refactoring)&lt;/li&gt;
  &lt;li&gt;any good references for writing code?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compiling-a-cc-program&quot;&gt;Compiling a C/C++ program&lt;/h3&gt;
&lt;p&gt;Compiling can be as simple as executing the command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g++ helloWorld.cpp -o helloWorld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or as difficult as compiling  various source files, linking various static and dynamic libraries. It is one of the important component of program development. These tutorials provide hands on experience with compiling C++ programs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Learn the basics of compilation from a &lt;a href=&quot;https://medium.com/better-programming/learn-how-to-compile-a-c-program-382c4c690bdc&quot;&gt;Medium post titled Learn How to Compile a C++ program&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Individual steps of compilation of a C program are beautifully explained
in a &lt;a href=&quot;https://www.cs-fundamentals.com/c-programming/how-to-compile-c-program-using-gcc&quot;&gt;CS fundamentals blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;static-vs-dynamic-linking&quot;&gt;Static vs Dynamic Linking&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A simple explanation of static and dynamic libraries in a &lt;a href=&quot;https://www.learncpp.com/cpp-tutorial/a1-static-and-dynamic-libraries/&quot;&gt;Learncpp tutorial&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A further discussion is done in a &lt;a href=&quot;https://cs-fundamentals.com/tech-interview/c/difference-between-static-and-dynamic-linking&quot;&gt;CS fundamentals post&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Optional) A nuanced comparison of performance issues with static and dynamic linking in a &lt;a href=&quot;https://stackoverflow.com/questions/1993390/static-linking-vs-dynamic-linking&quot;&gt;SO post&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-use-library-for-application-development&quot;&gt;How to use library for Application development&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We need to configure the compiler of our IDE and a [LearnCPP post] explains it using the case of VisualStudio and Codeblocks&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As a simple concrete example a &lt;a href=&quot;https://medium.com/better-programming/navigating-the-world-of-distributed-c-code-e439406f3e42&quot;&gt;Medium post titled Navigating the world of distributed code&lt;/a&gt; explains how to work with uncompiled library/ header only libary and use &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; tool to configure the compiler&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As a concrete example, I was successful in configuring the MingW compiler of Codeblocks IDE to use &lt;a href=&quot;https://www.libsdl.org/index.php&quot;&gt;SDL2 library&lt;/a&gt; by following the [GRHMedia blog post] listed in the &lt;a href=&quot;https://wiki.libsdl.org/Tutorials&quot;&gt;SDL’s Tutorial Wiki&lt;/a&gt; as a video tutorial.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;advancedhow-to-create-a-library&quot;&gt;(Advanced)How to create a library?&lt;/h3&gt;

&lt;p&gt;This is an advanced topic. I have not explored it but can refer to &lt;a href=&quot;https://www.cs-fundamentals.com/c-programming/static-and-dynamic-linking-in-c#static-libraries&quot;&gt;Create Static and Dynamic Link Libraries in C on Linux&lt;/a&gt; from CS-fundamentals blog.&lt;/p&gt;

&lt;h2 id=&quot;debugging-code&quot;&gt;Debugging code&lt;/h2&gt;

&lt;p&gt;Tutorials explaining good programming practices while debugging code are given here.(#TODO)&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">C++ references of websites, books, code and APIs for learning C/C++.</summary></entry><entry><title type="html">How to build Jekyll website on WINDOWS</title><link href="/2020/05/24/workflow-for-building-jekyll-website.html" rel="alternate" type="text/html" title="How to build Jekyll website on WINDOWS" /><published>2020-05-24T00:00:00+05:30</published><updated>2020-05-24T00:00:00+05:30</updated><id>/2020/05/24/workflow-for-building-jekyll-website</id><content type="html" xml:base="/2020/05/24/workflow-for-building-jekyll-website.html">&lt;div class=&quot;box&quot;&gt;
&lt;img src=&quot;/assets/images/Jekyll/JekyllLogo.svg&quot; alt=&quot;jekyll-logo&quot; width=&quot;150px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;unexpected-motivation-windows-subsystem-for-linux&quot;&gt;Unexpected motivation: Windows Subsystem for Linux&lt;/h2&gt;

&lt;p&gt;My motivation to try out Jekyll is twofold. The first revolves around a possibility to revive my lost touch with GNU/Linux OS. The other is the promise of Jekyll to have programmatic control over building websites. These are interlinked. But I would like to present a perspective.&lt;/p&gt;

&lt;p&gt;I like to work on GNU/Linux distribution. In my undergraduate studies, I mostly explored the Ubuntu operating system, which is Debian based operating system. Debian itself is a GNU/Linux distribution. However in my PhD, I bought a Dell Inspiron 7348 13 inch laptop which had Windows preinstalled. I wished for a Ubuntu version, but unfortunately it was not available in the market in my home country, India. I was not confident of flashing the hard disk and install my custom version of Ubuntu as I was new to laptops and read in the Internet that GNU/Linux OSes are not stable in laptops because the certain hardware components like networking related in a laptop still dont have open source drivers that are supported by the OEMs (Original Equipment Manufacturers). This was the story back in the year 2015. Anyways, the long story short is that I stuck to Windows OS even though I was not happy till I came know of Windows Subsystem for Linux. Using Linux in Windows as virtual machine using &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt; was promising but was resource heavy in terms of memory and overall feeling was of slow performance. As a result&lt;/p&gt;

&lt;p&gt;Windows Subsystem for Linux (WSL) promised to bridge the communities of the Windows and GNU/Linux world and provide commonly used GNU/Linux tools on the Windows platform. This was an output of very smart people and hinted at the importance of open source community in driving innovation. Also surprisingly, this sent an alarm across the open source community about the &lt;a href=&quot;https://itsfoss.com/windows-linux-kernel-wsl-2/&quot;&gt;impending death of open source development&lt;/a&gt;.. Till now most of the software development was mutually disjoint into the proprietary world and the open source world.&lt;/p&gt;

&lt;h2 id=&quot;expected-motivation-jekyll&quot;&gt;Expected Motivation: Jekyll&lt;/h2&gt;

&lt;p&gt;Earlier I used to build my website using &lt;a href=&quot;https://www.glump.net/software/zim-windows&quot;&gt;Zim desktop wiki&lt;/a&gt;. Zim is a great tool. It actually helped me learned some aspects of Application Programmers Interfaces (APIs) after going through its source code. But it was not difficult to realize the limitations of such workflows as using Zim or Wordpress after reading an article by Andrej Karpathy to &lt;a href=&quot;https://karpathy.github.io/2014/07/01/switching-to-jekyll/&quot;&gt;switch from Wordpress to Jekyll&lt;/a&gt;. Wordpress site is built on a database, which itself is binary and prone to security threats. In retrospection/hindsight, Zim does not have programmatic control over the variables of the site like the authors, posts, tags and titles.&lt;/p&gt;

&lt;p&gt;My testimonial to Zim written at the forum in September of 2019.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My motivation to migrate from Zim to &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll&lt;/a&gt; actually involved a cascade of events primarily starting from a desire to version control my PhD thesis. As a result I fleeted along various tools like &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; (for versioning content), &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax#philosophy&quot;&gt;markdown&lt;/a&gt; (for structuring content), &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; (for editing content) and Jekyll (for viewing content). The GCD (upside) of these tools turned out to be &lt;strong&gt;seamless platform (desktop/web) agnostic content-keeping&lt;/strong&gt;. The LCM (downside) is the larger footprint compared to the much leaner Zim. Since Zim restrains itself by being a &lt;strong&gt;desktop wiki&lt;/strong&gt;, I was more convinced to make the migration after reading a &lt;a href=&quot;https://github.com/zim-desktop-wiki/zim-desktop-wiki/issues/26&quot;&gt;GitHub issue that discusses Zim lacks markdown support&lt;/a&gt;. After reading a &lt;a href=&quot;https://v4.chriskrycho.com/2015/academic-markdown-and-citations.html&quot;&gt;post on an academic writing workflow&lt;/a&gt; by Chris Krycho using markdown with the support of &lt;a href=&quot;https://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt; (for interdocument conversion), I started the migration. Jekyll is only a part of the process.
   Notwithstanding my perceived limitations of Zim, as a testimony, I would like to share that Zim helped me learn a lot about web tools (like wiki functioning, html, thrill of creating your own site with fivethirtyeight theme :D (I still use it for my site)), content-keeping (like interlinking notebooks), API usage (my first serious foray into reading source codes was through Zim. I managed to extend Zim’s functionality, along with some web scraping Python modules, to setup up a Mendeley like interface of many-to-many mappings between Authors, Titles and Years :D).
  On a philosophical note, &lt;strong&gt;Zim is but a bead in the process of evolution of content-keeping&lt;/strong&gt;. It is neither the beginning nor the end. Its a long way to go where the GCD equals the LCM (the ultimate non duality) ;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us get started with building Jekyll generated static sites on Windows.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;requirements-of-jekyll&quot;&gt;Requirements of Jekyll&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;Git(optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is a static site generator. It is assumed that the site we intend to create is a collection of posts. We can order the posts based on the creation date, the authors of the posts, the tags that represent the post content. The design philosophy for the site can also be materialied using other site generators like Wordpress or offline static generators like &lt;a href=&quot;https://www.glump.net/software/zim-windows&quot;&gt;Zim desktop wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we focus on the build process of the website rather than the philosophy of Jekyll. For more information on how Jekyll works, refer to the post &lt;a href=&quot;/2019/10/13/Building-Jekyll-website.html&quot;&gt;What is Jekyll?&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ruby&quot;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;Jekyll is a Ruby gem based on Ruby programming language. However there is no need to know Ruby to build our site. What we need however is Ruby installed on Windows OS. Now there are &lt;a href=&quot;https://jekyllrb.com/docs/installation/windows/&quot;&gt;two options&lt;/a&gt; for a Ruby installation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A native installation of Ruby for Windows&lt;/li&gt;
  &lt;li&gt;A Linux based installation in the Windows subsystem for Linux (WSL).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I personally was thrilled with the second option. This led me for the first time to explore &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/about&quot;&gt;Windows Subsystem for Linux&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Windows Subsystem for Linux is a GNU/Linux environment &lt;strong&gt;directly&lt;/strong&gt; in Windows &lt;strong&gt;without the overhead of running a virtual machine&lt;/strong&gt;. This is something that baffled most of the development communities of both open source and closed source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;WSL needs Windows to run on Insider Preview mode. This allows to activate WSL as an optional feature. After activating the WSL, &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;install a GNU/Linux distribution on Windows&lt;/a&gt;. I chose Ubuntu 18.04 LTS. After a successful installation of Ubuntu 18.04, you can start literally open &lt;strong&gt;Bash terminal on Windows&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now &lt;a href=&quot;https://jekyllrb.com/docs/installation/windows/&quot;&gt;install the Jekyll Ruby gem&lt;/a&gt; on WSL as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Jekyll/JekyllBuildWebsite_00.png&quot; alt=&quot;install-Jekyll&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gitoptional&quot;&gt;Git(optional)&lt;/h3&gt;

&lt;p&gt;Though the version control is not necessary, it has its own benefits. Creation of contents is not a one time affair, and we need to incrementally revise our content and maybe revert back to previous versions of content. In such circumstances versioning your content saves your skin.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;Git for windows&lt;/a&gt; installation is straightforware. However knowing how to use Git is &lt;strong&gt;not&lt;/strong&gt;. It has steep enough learning curve, but once a working knowledge is acquired, there is no going back.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;setup-a-jekyll-website&quot;&gt;Setup a Jekyll website&lt;/h2&gt;

&lt;p&gt;Jekyll supports gem based themes for the website, which outline the structure of the website and its styling. The structure conveys how the posts are stored, how the authors of the posts hyperlinked to the posts, if there are any tags  to the posts that can be sieved. However, we will follow the basic route and not rely on these theme. Instead let us &lt;a href=&quot;https://jekyllrb.com/docs/step-by-step/01-setup/&quot;&gt;setup a website from scratch&lt;/a&gt;. The folder structure of our website will look something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Jekyll/JekyllBuildWebsite_01.png&quot; alt=&quot;website-structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The core components of the website are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;root&amp;gt;&lt;/code&gt; directory which holds the source code of the site. It can have any name.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.config.yml&lt;/code&gt; A YAML file that describes how the site is configured.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; that lists the Ruby dependencies of the sites.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; A file that freezes the version changes of dependencies so that site can be constructed across platforms and system. This is similar to a &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file used during installing a python virtual environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A build of site is an iterative process where each iteration involves four steps,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Creating content for the site; in our case in the form of posts.&lt;/li&gt;
  &lt;li&gt;Checking if the content and the styling of the site is proper by running the site on a local server. This is called &lt;strong&gt;development version&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Once things are in order, committing the incremental creation to a version control system.&lt;/li&gt;
  &lt;li&gt;Finally deploying the site on a real server or production server. This means others on the internet can access your website. This is called &lt;strong&gt;production version&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us discuss these steps below.&lt;/p&gt;

&lt;h3 id=&quot;creating-posts&quot;&gt;Creating posts&lt;/h3&gt;

&lt;p&gt;Go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory and create a post. Jekyll posts support markdown. A valid format for the name of the post is&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Year-Month-Date-name-of-post.md
2020-05-24-how-to-build-jekyll.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;serve-the-site-on-a-local-server&quot;&gt;Serve the site on a local server&lt;/h3&gt;
&lt;p&gt;After creating the content, to check how the site would appear if deployed on production servers, we can serve the site from a local server provided by Jekyll by&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.../root$bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The site can then be accessed at &lt;code class=&quot;highlighter-rouge&quot;&gt;http:localhost:4000&lt;/code&gt;. We can keeping modifying content even when the site is running. This is an &lt;strong&gt;awesome feature&lt;/strong&gt; of Jekyll and is called &lt;strong&gt;incremental-build&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;versioning-the-site&quot;&gt;Versioning the site&lt;/h3&gt;

&lt;p&gt;Once you are satisfied with how the site is deployed, stop the server. Now it is a good idea to version control the site using Git. If not already initialized, initialize the git repository in the directory where the root of the site resides. We have named the root of the directory as &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; itself.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;parent-directory-of-site's-root&amp;gt;$git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;build-the-site-for-production&quot;&gt;Build the site for production&lt;/h3&gt;

&lt;p&gt;Now generate the site for production using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JEKYLL=bundle exec jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This generates a &lt;code class=&quot;highlighter-rouge&quot;&gt;sites&lt;/code&gt; directory in the &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; directory.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;workflows-for-building-the-site&quot;&gt;Workflows for building the site&lt;/h1&gt;

&lt;p&gt;There are two workflows for building the site. The first involves simple configuration but many steps during deployment. The second involves lengthy configuration but simple click deployment. Common to both the posts are creating the post and checking the site on local server. What differs is how we version control the site and its source code and how we deploy the production ready site.&lt;/p&gt;

&lt;h2 id=&quot;simple-workflow&quot;&gt;Simple workflow&lt;/h2&gt;

&lt;p&gt;Basically in the simple workflow we separate the source code of the site from the site ready for production. To accomplish, we have two gitted repositories; one for the source and the other for the deployment&lt;/p&gt;

&lt;h3 id=&quot;source-side-git-repository&quot;&gt;Source side git repository&lt;/h3&gt;

&lt;p&gt;If not already initialized, initialized a git repository in the directory which contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; of the site’s source code. Also create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file to exclude the built site at &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; and other cache files of Jekyll as shown below&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;parent-directory-of-site's-root&amp;gt;$git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Jekyll/JekyllBuildWebsite_02.png&quot; alt=&quot;simple-workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now after an incremental creation of site and cross checking in the local server, when it is time to version control the site, commit to the repository by&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git commit -m &quot;my nth post&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now build the site using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$bundle exec jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory which holds the site files. These need to copied with delta copy algorithm to the Server side repository.&lt;/p&gt;

&lt;h3 id=&quot;server-side-git-repository&quot;&gt;Server side git repository&lt;/h3&gt;

&lt;p&gt;I want to push my site files to the GitHub using the GitHub’s website hosting service. Basically a repository named &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;GitHubusername&amp;gt;.github.io&lt;/code&gt; can host your website automatically. This is possible due to the &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub pages&lt;/code&gt; website hosting &lt;strong&gt;service&lt;/strong&gt;. My username on GitHub is baalkikhaal. Once I create a repository named baalkikhaal.github.io in my profile I will clone it on my local computer using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;server-side-git-repository-parent-directory&amp;gt;$git clone https://github.com/Baalkikhaal/Baalkikhaal.github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates a local copy of the server side repository at &lt;code class=&quot;highlighter-rouge&quot;&gt;...Sites/Baalkikhaal.github.io&lt;/code&gt; directory. This directory contains only the site files which are there at production server on GitHub site. Additionally it has git files like &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; directory. In this way I have copy of the server side of the site.&lt;/p&gt;

&lt;p&gt;Since I have created an incremental content in the source side repository and built the site also there will be additional files in the source side in comparison to server side as shown below by listing the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;.../homepage/root/_site&lt;/code&gt; source side directory and &lt;code class=&quot;highlighter-rouge&quot;&gt;.../Sites/Baalkikhaal.github.io&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -al&lt;/code&gt; command as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Jekyll/JekyllBuildWebsite_03.png&quot; alt=&quot;files-to-sync&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All I have to do is transfer my site files here from the source side. For this I will &lt;strong&gt;delta copy&lt;/strong&gt; my site files from source side using &lt;code class=&quot;highlighter-rouge&quot;&gt;rsync&lt;/code&gt; command. &lt;code class=&quot;highlighter-rouge&quot;&gt;rsync&lt;/code&gt; uses delta-copy algorithm and preserves the flags of the file like creation date and modification date. In this way, unmodified files in the site will not be recopied thereby avoiding unnecessary overhead during incremental commits&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$rsync -av dir1/ dir2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this command copies the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;dir1&lt;/code&gt; excluding the &lt;code class=&quot;highlighter-rouge&quot;&gt;dir1&lt;/code&gt; perse into the &lt;code class=&quot;highlighter-rouge&quot;&gt;dir2&lt;/code&gt;. This is done below to transfer the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;.../homepage/root/_site/&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;.../Sites/Baalkikhaal.github.io/&lt;/code&gt;. Specifically the command used is shown below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Jekyll/JekyllBuildWebsite_04.png&quot; alt=&quot;files-are-synced&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that the files are added to the server side repository, it is time to commit the files to the git. After doing the commit similar to that done in source side repository. It is time to push the commit to the production server hosted at GitHub using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The meaning of this command is explained in the &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&quot;&gt;Git tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;github-pages-workflow&quot;&gt;GitHub pages workflow&lt;/h2&gt;

&lt;p&gt;Refer &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt; for setting up this workflow. It involves tedious configuration steps, but once the site is configured, it is simple click to deploy the site for production unlike the &lt;em&gt;Simple Workflow&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the Simple Workflow, we use Github as a website hosting service only. A website hosting service provides&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;storage space for our content&lt;/li&gt;
  &lt;li&gt;a URL(Universal Resource Locator) for our website, so any one on the internet can access our content. The internals of serving a site like setting up a web server, alloting an IP address for the machine which is running the server, is undertaken by the hosting service reducing the overhead for the client. The job of the client is to only store the html content at the appropriate location on the server machine. This is usually done by an FTP transfer of files as in the case of LAN network which consist of a peripheral node machine that talks to the outside world&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;web security service. This is one of the most important aspects of internet communication. Disruption to the serving of content is attempted with malicious intent by many elements either human or bots. Disruption can be in the form of&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;corrupting the content.&lt;/li&gt;
  &lt;li&gt;making the content inaccessible to potential users.&lt;/li&gt;
  &lt;li&gt;tracking the usage of content violating the privacy of users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is the duty of the hosting service to secure the content. When we use Jekyll to create our static content, we programmatically create the linked site structure in the form of posts and pages. As Jekyll supports mardown, creating posts in markdown is more easier than writing in raw html by utilizing the markdown’s easily readable markup format. The posts and pages are written in markdown. In addition, the assets of the site like multimedia (images, audio, video files), javascript (for animations and event driven responses) and css (for styling the content) are handled as separate containers are easily linked to sites using Markdown’s hyper reference syntax. Further in combination with Jekyll’s &lt;strong&gt;Liquid template language&lt;/strong&gt;,  we can load load dynamic content on your site.. Once we are ready with our content, we need to build the site. This means we turn the crank of Jekyll and it generates inter linked html content ready to be hosted.&lt;/p&gt;

&lt;p&gt;In the simple workflow, the step of building content is done offline by the user and once h/she is satisfied with how the content is served by testing on a local server, the built content is pushed onto the machine providing the web hosting service. In general the machine can be provided by any service provider. It is not required that the site built from jekyll needs to served on Github repository. However we choose to serve it on a Github repository as it provides free hosting service. As shown earlier, by pushing the content on the &lt;code class=&quot;highlighter-rouge&quot;&gt;baalkikhaal.github.io&lt;/code&gt; repository, the html is served at &lt;code class=&quot;highlighter-rouge&quot;&gt;https://baalkikhaal.github.io&lt;/code&gt;. In the backend, it is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Github Pages&lt;/code&gt; webhosting service that is responsible for serving the site.&lt;/p&gt;

&lt;h3 id=&quot;github-pages&quot;&gt;Github Pages&lt;/h3&gt;
&lt;p&gt;Github Pages is a website hosting service that has two roles&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;serve the html content hosted on the repository&lt;/li&gt;
  &lt;li&gt;build the html content jekyll source&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first role is utilized in the Simple Workflow. The second role can be utilized to outsource the job of building the jekyll site to the Github Pages so that there is no need to build the site offline. Further convenience is gained by maintaining a local git of the site repository. After editing the site, a simple push to the origin ensures the changes are live. If the git jargon is confusing, please check out &lt;a href=&quot;/2020/05/23/Git-Command-Cheat-Sheet.html&quot;&gt;git jargon&lt;/a&gt;. This makes the building sites easy and is reflected in the motto of &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just edit, push, and your changes are live.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">Let us use web development tools hosted on the Windows Subsystem for Linux to build static websites eventually to be hosted on GitHub.</summary></entry><entry><title type="html">Trace Bitmap tool in Inkscape: A tutorial</title><link href="/2020/05/24/trace-bitmap-in-inkscape.html" rel="alternate" type="text/html" title="Trace Bitmap tool in Inkscape: A tutorial" /><published>2020-05-24T00:00:00+05:30</published><updated>2020-05-24T00:00:00+05:30</updated><id>/2020/05/24/trace-bitmap-in-inkscape</id><content type="html" xml:base="/2020/05/24/trace-bitmap-in-inkscape.html">&lt;div class=&quot;box&quot;&gt;
&lt;img src=&quot;/assets/images/Inkscape/inkscapeLogo.svg&quot; alt=&quot;inkscape-logo&quot; width=&quot;150px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;One of the beautiful tools of Inkscape is to generate vectorized versions of raster images formats like &lt;code class=&quot;highlighter-rouge&quot;&gt;.png&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.jpg&lt;/code&gt;. This is a simple tutorial to demonstrate the workflow. For the demonstration, we will use any of the daily updated Windows Welcome Screen. When we log in to the Windows, the Welcome Screen shows a beautiful landscape and we can vote for the daily update. Depending on our tastes, Windows selects a particular genre for the images. My inclination is towards nature imagery, without the presence of human derived structures or humans itself. Now to access the location where the images are stored is a bit tricky. After following the tutorial on &lt;a href=&quot;https://www.laptopmag.com/articles/find-windows-10-lock-screen-pictures&quot;&gt;Windows 10 Spotlight LockScreen pictures&lt;/a&gt;, I could access my laptop’s welcome screen images. I created a desktop shortcut to the location for easy access in the future. Let’s get started with generating the vectorized version of one of these beautiful curated sceneries.&lt;/p&gt;

&lt;h2 id=&quot;trace-bitmap-tutorial&quot;&gt;Trace BitMap Tutorial&lt;/h2&gt;

&lt;p&gt;Firstly import the &lt;code class=&quot;highlighter-rouge&quot;&gt;.png&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.jpg&lt;/code&gt; into a new Inkscape project. The productivity in using Inkscape is enhanced by using shortcuts. Slowly with experience, one gets used to the shortcuts. For importing, use &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+I&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_00.png&quot; alt=&quot;import-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Path&lt;/code&gt; menu item, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Trace BitMap&lt;/code&gt; tool. You have the option of creating single scan or multiple scans. A single scan creates a single path object and multiple scan creates group of paths. Create a multiple scan with 8 reduced colors. The algorithm appropriately chooses the reduced colors from the color spectrum of the image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_01.png&quot; alt=&quot;trace-bitmap-dialog-options&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The vector image is a group of 8 paths.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_02.png&quot; alt=&quot;vectorized-bitmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To view the paths, let us ungroup them using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Ungroup&lt;/code&gt; tool of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; menu. The short cut is &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift+Ctrl+G&lt;/code&gt;. Note that the vector should be selected first. After ungrouping each of the paths is a background with a reduced color with a &lt;strong&gt;clip&lt;/strong&gt; (What are &lt;a href=&quot;#&quot;&gt;clips&lt;/a&gt;? #TODO)depicting the contour for the corresponding color. So the total vector image is a combination of cascaded contours of reduced colors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_03.png&quot; alt=&quot;contours-of-vector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is more easily understood by taking a simpler raster image. Below depicts the angular part of the orbital of hydrogen atom. This is generated using Mayavi, a python package for 3D visualization. The code is very simple and is explained elsewhere (#TODO write post for mayavi tutorial)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_04.jpg&quot; alt=&quot;1s-orbital&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us apply the same Trace Bitmap tool and vectorize the orbital with only 4 reduced color. This is shown to the right of the first column. After ungrouping the vector paths and separating the paths, we can see it is made up a cascaded contours as shown in the middle figure. For more clarity, the paths for each reduced color are projected in perspective with subpar opacity which clearly highlights the cascaded nature of the paths as shown in last row. The projection of the paths onto perspective determined by the parallelogram drawn in the last row is done by &lt;code class=&quot;highlighter-rouge&quot;&gt;Perpective&lt;/code&gt; tool in &lt;code class=&quot;highlighter-rouge&quot;&gt;Extensions&lt;/code&gt; menu item. The &lt;a href=&quot;#&quot;&gt;tutorial for Perspective&lt;/a&gt; #TODO is here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_05.png&quot; alt=&quot;contours-of-1s-orbital&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coming back to the nature scenery, since we have ungrouped the vector, let us select the original raster image again and generate a new vector image. Now select the vector image and let us export the vector image to png. Using  &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift+Ctrl-E&lt;/code&gt; shortcut. Set the export options like &lt;code class=&quot;highlighter-rouge&quot;&gt;Selection&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dpi&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Filename&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_06.png&quot; alt=&quot;export-png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The final vector image is below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_07.png&quot; alt=&quot;vector-image&quot; /&gt;&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">Let us use `Trace Bitmap` tool of Path toolset to generate vectorized versions of raster images</summary></entry><entry><title type="html">Introducing Spintronics</title><link href="/2020/05/24/spintronics.html" rel="alternate" type="text/html" title="Introducing Spintronics" /><published>2020-05-24T00:00:00+05:30</published><updated>2020-05-24T00:00:00+05:30</updated><id>/2020/05/24/spintronics</id><content type="html" xml:base="/2020/05/24/spintronics.html">&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;Write a paragraph on spintronics. what skills are required to understand spintronics. What are the areas your lab is working on. What are you working on.
What is the specific problem you are working on&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Maekawa Spin Electronics&lt;/li&gt;
  &lt;li&gt;Marrows&lt;/li&gt;
  &lt;li&gt;JAC Bland&lt;/li&gt;
&lt;/ul&gt;</content><author><name>fubar</name></author><category term="physics" /><summary type="html">We probe, control and thereby manipulate the spin degree of freedom of the electron to affect various processes ranging from information storage, transfer and processing.</summary></entry><entry><title type="html">Cheat sheet for GIT</title><link href="/2020/05/23/Git-Command-Cheat-Sheet.html" rel="alternate" type="text/html" title="Cheat sheet for GIT" /><published>2020-05-23T00:00:00+05:30</published><updated>2020-05-23T00:00:00+05:30</updated><id>/2020/05/23/Git-Command-Cheat-Sheet</id><content type="html" xml:base="/2020/05/23/Git-Command-Cheat-Sheet.html">&lt;div class=&quot;box&quot;&gt;
&lt;img src=&quot;/assets/images/Git/gitLogo.svg&quot; alt=&quot;Git-logo&quot; width=&quot;150px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;The concepts around Git can be summarized by the taglines&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Distributed is the new centralized&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Version control is an essential element of software management. Git is a Swiss Army knife equivalent among the version control systems.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git is a version control system that provides tools to probe, build versioned software with key emphasis distributed development&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us learn the fundamentals of Git with the guidance of &lt;a href=&quot;https://tom.preston-werner.com/2009/05/19/the-git-parable.html&quot;&gt;the Git Parable&lt;/a&gt; and apply Git to each step of software sharing that involve&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;code reuse&lt;/li&gt;
  &lt;li&gt;code build up&lt;/li&gt;
  &lt;li&gt;code sharing/shipping&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-reuse&quot;&gt;Code reuse&lt;/h2&gt;

&lt;p&gt;Reusability of code is essential feature of software development. It sincerely captures of philosophy of &lt;strong&gt;standing on top of the shoulder of giants&lt;/strong&gt;, a phrase that was famously used by Stephen Hawking in his book on Celestial mechanics and also used as tagline of Google scholar. To be able to reuse code, firstly it needs to be available for installation. Prior to the internet, code was shared in the form of physical shipping of physical media like floppy disks and CDs. With the advent of internet, physical media sharing was bypassed and code was &lt;code class=&quot;highlighter-rouge&quot;&gt;downloaded&lt;/code&gt; either directly from others computers or from common repositories. With the evolution of code sharing, came standards for how to share code. Then came the formats like &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.zip&lt;/code&gt; files which are bundles for code files, binary or otherwise. With the advent of version control systems, code was accessible from a central repository on the internet. In a centralized version control system, there is a &lt;strong&gt;single host&lt;/strong&gt;. A download involved accessing the contents of the repository. In contrast, distributed version control systems like &lt;code class=&quot;highlighter-rouge&quot;&gt;Git&lt;/code&gt; allowed &lt;strong&gt;multilple hosts&lt;/strong&gt;. To host a code all one had to do was download the entire code and provide the link to download. in this anyone can be a potential host and anyone with access to the link can download the code.&lt;/p&gt;

&lt;p&gt;For our purpose of learning code reuse we will use &lt;a href=&quot;https://inkscape.org/develop/extensions/&quot;&gt;GitHub’ code hosting service&lt;/a&gt;. Code on GitHub is categorized into &lt;strong&gt;Git repositories&lt;/strong&gt;. It is to be noted that Git repository cannot be hosted anywhere. Only that GitHub is one of the hosting services. Others include but not limited to &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;GitLab&lt;/a&gt;, older &lt;a href=&quot;https://sourceforge.net/&quot;&gt;Sourceforge&lt;/a&gt;, &lt;a href=&quot;https://bitbucket.org/&quot;&gt;Bitbucket&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Git repository is simply a versioned code that tracks the history of its development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two kinds of Git repositories; private and public type. A public repository is accessible to anyone with an Internet connection in two ways&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;download the repository as a &lt;strong&gt;zipped&lt;/strong&gt; file to your local machine.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cloning the repository&lt;/strong&gt; via local Git system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will focus on the later.&lt;/p&gt;

&lt;h3 id=&quot;git-cloning&quot;&gt;Git cloning&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git clone is basically getting a copy of the Git repository on the local machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we begin git cloning the repository, we need to &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&quot;&gt;setup Git system on our local machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we a working Git on your system, let us take a simple repository as a concrete example to work with. Currently fubar is interested in developing an &lt;a href=&quot;https://inkscape.org/develop/extensions/&quot;&gt;Inkscape extension&lt;/a&gt; to draw the orbitals of a hydrogen atom by providing the quantum numbers as input parameters to the extension. After reading the documentation, fubar proceeds to work on an extension template hosted as a Git repository at&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/Neon22/inkscape_extension_template
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the URL to the Git repository it is understood that the name of the repository is &lt;code class=&quot;highlighter-rouge&quot;&gt;inkscape_extension_template&lt;/code&gt;, the name of the developer is &lt;code class=&quot;highlighter-rouge&quot;&gt;Neon22&lt;/code&gt;. To clone the Git repository, we need the URL of the Git repository which is&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/Neon22/inkscape_extension_template.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;with a suffix &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;. Now fubar fires up a &lt;code class=&quot;highlighter-rouge&quot;&gt;Git Bash on Windows&lt;/code&gt; shell and moves to the directory that hosts Git repositories and executes&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git clone https://github.com/Neon22/inkscape_extension_template.git

Cloning into 'inkscape_extension_template'...
remote: Enumerating objects: 2, done.
remote: Counting objects: 100% (2/2), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 60 (delta 0), reused 0 (delta 0), pack-reused 58
Unpacking objects: 100% (60/60), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command has &lt;strong&gt;cloned the Git repository&lt;/strong&gt; from the GitHub repository. One of our first Git commands. To check the contents of the clone change into the git repository.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd inkscape_extension_template/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check the contents of the repository including the hidden files and folders&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -al

total 38
drwxr-xr-x 1 fubar 197121     0 Jun  1 19:41 ./
drwxr-xr-x 1 fubar 197121     0 Jun  1 19:40 ../
drwxr-xr-x 1 fubar 197121     0 Jun  1 19:41 .git/
-rw-r--r-- 1 fubar 197121   702 Jun  1 19:41 .gitignore
-rw-r--r-- 1 fubar 197121  1098 Jun  1 19:41 LICENSE.md
-rw-r--r-- 1 fubar 197121   541 Jun  1 19:41 README.md
-rw-r--r-- 1 fubar 197121  4215 Jun  1 19:41 template.inx
-rwxr-xr-x 1 fubar 197121 13222 Jun  1 19:41 template.py*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition to the usual source files, there is the most important hidden directory &lt;strong&gt;.git&lt;/strong&gt; which tracks the entire history of the code development. We will now extract various kinds of information about the project from this hidden directory using appropriate Git commands.&lt;/p&gt;

&lt;h3 id=&quot;remote-repository-information&quot;&gt;Remote repository information&lt;/h3&gt;

&lt;p&gt;Our local Git repository and the host Git repository maintain a parent-child relationship. Just as the local repository is called the &lt;strong&gt;clone&lt;/strong&gt; of the host repository, the host is called the &lt;strong&gt;remote&lt;/strong&gt; of the local repository. To probe the remote of the local clone, fubar executes&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git remote -v

origin	https://github.com/Neon22/inkscape_extension_template.git (fetch)
origin	https://github.com/Neon22/inkscape_extension_template.git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two &lt;strong&gt;remote&lt;/strong&gt; listings each. Both are named &lt;strong&gt;origin&lt;/strong&gt;. Origin refers to the &lt;strong&gt;original remote&lt;/strong&gt; from which the current local Git repository has been cloned from. The location of the origin is given by the URL in the second columns The first is of type &lt;strong&gt;fetch&lt;/strong&gt; and the second is of type &lt;strong&gt;push&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To understand &lt;strong&gt;fetch&lt;/strong&gt; and &lt;strong&gt;push&lt;/strong&gt; types we have to bear in mind that neither the version of the remote Git repository is frozen nor the version is the local Git repository is frozen. Both undergo &lt;strong&gt;revision&lt;/strong&gt; with the course of time. If fubar wants to request the latest revision, fubar does a &lt;strong&gt;fetch&lt;/strong&gt; and instead he wants to share his own revision, he does a &lt;strong&gt;push&lt;/strong&gt;. We will revisit these Git concepts later we deal with &lt;a href=&quot;#code-sharing&quot;&gt;Code Sharing&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;viewing-the-commit-history&quot;&gt;Viewing the commit History&lt;/h3&gt;

&lt;p&gt;Now fubar is curious about how the repository went about getting developed i.e. he wants to get quick snapshot of the history of the repository. This is stored in the &lt;strong&gt;log&lt;/strong&gt; of the git repository. To probe the log with a minimal output fubar executes&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git log --oneline

d97836c Delete extension information.txt
4889dc9 Add notepad page docs
8a3c5c3 Update color
8049ee6 Update for color example
c49d5cd Merge pull request #2 from Moini/patch-1
3d19313 Fix error
406cfba Merge pull request #1 from Moini/patch-1
e204ad8 Add hint about meaning of underscores
fe82878 Update for 0.91
ac1d702 more info
c083b0b added enums without minmal appearance
bac9453 first pass
1da7b47 MIT license
4862033 ignore
1fdb2c9 readme
15e9eb1 Create README.md
4d9117c Revert &quot;initial commit&quot;
3cc5ac8 Create .gitignore
8d98e82 Create LICENSE.md
b65b4a1 Create README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output lists a series of what are called &lt;strong&gt;snapshots&lt;/strong&gt; of the Git repository. A &lt;strong&gt;snapshot&lt;/strong&gt; is an iteration of code development that adds a particular functionality to the existing repository. The functionality can be a adding a new feature, an update to the documentation. Every iteration is labelled by a  &lt;strong&gt;commit message&lt;/strong&gt; and a 40 character SHA1 hash over the additional code. The process of adding these iterations to the repository is discussed in &lt;a href=&quot;#code-sharing&quot;&gt;Code Sharing section&lt;/a&gt;. The output summa
With a &lt;code class=&quot;highlighter-rouge&quot;&gt;--oneline&lt;/code&gt; flag, the output is restricted to the list of commits along with only first 7 hexadecimal digits of the SHA1 encrypted snapshot for brevity. The latest snapshot is listed first. This is one of the first Git commands as part of &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History&quot;&gt;Viewing the Commit History&lt;/a&gt; as described in the original Git tutorial.&lt;/p&gt;

&lt;h2 id=&quot;code-sharing&quot;&gt;Code Sharing&lt;/h2&gt;

&lt;h2 id=&quot;beginner-level-git-command-index&quot;&gt;Beginner level GIT command index&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;local/dir/path&amp;gt;$git clone &amp;lt;path/to/repository&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This accesses the remote git repository and clones it at the local directory path &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;local/dir/path&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git restore .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Suppose you did some changes to existing files and now intend have a clean slate of the working directory restored upto the last commit. As long as you have not done a commit yet, you are safe simply use the &lt;code class=&quot;highlighter-rouge&quot;&gt;restore&lt;/code&gt; command to erase the modifications.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git clean [-n] [-f] [-d]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have added new files which are not yet tracked then restore will not work. You need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;clean&lt;/code&gt; command. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; flag will list the files that can be possibly cleaned if the &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; flag is used. So &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; will clean the files whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; will clean the directories. This is useful when you do an error in copying files to the working directory and dont intend to keep the files.&lt;/p&gt;

&lt;p&gt;This is taken from this &lt;a href=&quot;https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree&quot;&gt;SO post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;intermediate-level-git-command-index&quot;&gt;Intermediate level GIT command index&lt;/h2&gt;

&lt;p&gt;???&lt;/p&gt;

&lt;h2 id=&quot;advanced-level-git-command-index&quot;&gt;Advanced level GIT command index&lt;/h2&gt;

&lt;p&gt;???&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">A reference for the commonly used GIT commands and explanations of the context when they are used</summary></entry><entry><title type="html">pyVISA on Windows</title><link href="/2019/10/21/Interface-VISA-hardware-with-Windows-using-Python.html" rel="alternate" type="text/html" title="pyVISA on Windows" /><published>2019-10-21T00:00:00+05:30</published><updated>2019-10-21T00:00:00+05:30</updated><id>/2019/10/21/Interface-VISA-hardware-with-Windows-using-Python</id><content type="html" xml:base="/2019/10/21/Interface-VISA-hardware-with-Windows-using-Python.html">&lt;div class=&quot;box&quot;&gt;
&lt;img src=&quot;/assets/images/Python/pythonLogo.svg&quot; alt=&quot;python-logo&quot; width=&quot;150px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;Interfacing test and measurement s&lt;/p&gt;

&lt;h2 id=&quot;history-of-visa&quot;&gt;History of VISA&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;VISA implementation from National Instruments: NI- VISA&lt;/li&gt;
  &lt;li&gt;Keithley USB488A and USB488B GPIB drivers&lt;/li&gt;
  &lt;li&gt;PyVISA: Python package that is a frontend to the VISA library&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ni--visa&quot;&gt;NI- VISA&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ni.com/en-in/support/downloads/drivers/download.ni-visa.html#305862&quot;&gt;Download: Permanent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ni.com/pdf/manuals/370423a.pdf&quot;&gt;Documentation : Permanent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/documents/PyVISA/National-Instruments-2001-NI-VISA-User-Manual.pdf&quot;&gt;Documentation: Mirror&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;keithley-gpib-to-usb-drivers&quot;&gt;Keithley GPIB to USB drivers&lt;/h3&gt;

&lt;p&gt;488A is older version of the GPIB to USB adaptor. The driver development is supported only till Windows 7. So if trying to install the driver on later Windows versions, it might get tricky&lt;/p&gt;

&lt;p&gt;Newer version is 488B&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tek.com/accessory/ki-488/3-1-3-1&quot;&gt;Download KUSB-488B GPIB driver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tek.com/accessory/gpib488/9-2-0&quot;&gt;Download KUSB-488A GPIB driver&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Remove the previous installation&lt;/li&gt;
  &lt;li&gt;Check the system is clean&lt;/li&gt;
  &lt;li&gt;Install the Keithley GPIB2USB drivers&lt;/li&gt;
  &lt;li&gt;Install the NI-VISA library
    &lt;ul&gt;
      &lt;li&gt;[Digression] Alternative Installation of VISA library&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Install PyVISA
    &lt;ul&gt;
      &lt;li&gt;Install python virtual environment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is essential to have no traces of previous installations of either the GPIB2USB drivers or the VISA libraries. This is ensured from checking the device manager  and installed programs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;In case PyVISA-py is already installed in a virtual environment, running
&lt;code class=&quot;highlighter-rouge&quot;&gt;python -m visa info&lt;/code&gt; will list the VISA libraries(either NI’s implementation or PyVISA-py’s own pure Python implemenation).
This check is optional and needed only if one is not sure if the drivers and VISA libraries are completely uninstalled&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;remove-the-previous-installation&quot;&gt;Remove the previous installation&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-00.png&quot; alt=&quot;Before Installation - Remove the VISA libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Plug the Keithley GPIB-USB adaptor and check the device manager listing. The hardware is not listed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-01.png&quot; alt=&quot;Before Installation - Check the device manager&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check the installed programs.  The driver is for KUSB-488B and the hardware is KUSB-USB488A. Hence it is not listed. Unplug the adaptor and remove the installed driver.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-02.png&quot; alt=&quot;Before Installation - Remove the Installed Keithley Driver&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;check-the-system-is-clean&quot;&gt;Check the system is clean&lt;/h3&gt;

&lt;p&gt;Run  ` python -m visa info` and see if the sytem is clean and ready for proper installation&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-03.png&quot; alt=&quot;Before Installation -Check the system is clean 00&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again plug the the Keithley GPIB-USB adaptor and check the device manager listing. This confirms that the system is ready for a proper installation of hardware.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-04.png&quot; alt=&quot;Before Installation -Check the system is clean 01&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;install-the-keithley-gpib2usb-drivers&quot;&gt;Install the Keithley GPIB2USB drivers&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ensure the hardware is unplugged&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Install the KUSB-488A driver with version 9.2.0. According to the release notes within the source directory,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;it is recommended to install the Keithley’s adaptor driver first followed by the NI’s own GPIB-488.2 driver to avoid vendor design conflict.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-05.png&quot; alt=&quot;Install the GPIB2USB driver 00&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rebooting the computer is a requirement after the completion of installations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-06.png&quot; alt=&quot;Install the GPIB2USB driver 01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After reboot, plug the hardware and check if it is installed in the device manager&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-07.png&quot; alt=&quot;Install the GPIB2USB driver 02&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;install-the-ni-visa-library&quot;&gt;Install the NI-VISA library&lt;/h3&gt;

&lt;p&gt;Install the NI’s implementation of the VISA specification; version 19.0&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-08.png&quot; alt=&quot;Install NI-VISA library-00&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uncheck the additional services provided by NI as these will only increase the number of unneccessary processes and services running in the background. In the older versions of NI-VISA, the option to uncheck GPIB-488.2 driver from NI was present in the installer. However the current version automatically checks for the GPIB driver pre-installed and accordingly proceeds with the installation to avoid conflict.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-09.png&quot; alt=&quot;Install NI-VISA library-01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After installation, check for the installed components. Check that the GPIB driver is from Maintainer GPIB-488 whereas NI-VISA is from NI itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-10.png&quot; alt=&quot;Install NI-VISA library-02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A successful installation creates &lt;code class=&quot;highlighter-rouge&quot;&gt;visa32.dll&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;visa64.dll&lt;/code&gt; dynamically linked libraries. DLL files are shareable libraries which can be ported as it is across systems offering convience of using software without recompiling on new systems. They act like patches.&lt;/p&gt;

&lt;p&gt;After the installation, look out for the install location; usually the &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\\Windows\system32&lt;/code&gt; and search for &lt;code class=&quot;highlighter-rouge&quot;&gt;visa32.dll&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;visa64.dll&lt;/code&gt;. If they are present there, then PyVISA-py can detect them without fuss. If they are not present there (for some reason), then proceed to the &lt;a href=&quot;##[Digression]-Alternative-Installation-of-VISA-library&quot;&gt;alternative installation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;digression-alternative-installation-of-visa-library&quot;&gt;[Digression] Alternative Installation of VISA library&lt;/h3&gt;

&lt;p&gt;For some reason, my VISA installation has not generated the DLLs at the location. I searched for visa* (* is called a wild card evaluating to any character set like 32.dll or 64.dll) across the WINDOWS directory and found a &lt;code class=&quot;highlighter-rouge&quot;&gt;visa32.dll&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Windows\SysWOW64\visa32.dll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To demonstrate the portability of DLL files, I copied the &lt;code class=&quot;highlighter-rouge&quot;&gt;visa32.dll&lt;/code&gt; to the PyVISA virtual environment (described below) and checked for the detection of the visa library.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -m visa info&lt;/code&gt; lists the detection of the visa32 library at the path of the virtual environment.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;However the bitness of Python installation (64 bit) and that of VISA (32bit) do not match. We need to fix this!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-11.png&quot; alt=&quot;Install NI-VISA library-03&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-a-virtual-environment&quot;&gt;Create a virtual environment&lt;/h2&gt;

&lt;p&gt;Tools available with us:&lt;/p&gt;

&lt;p&gt;32 bit VISAcd&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">A tutorial on interfacing VISA compatible hardware using python's wrapper module `pyVISA`.</summary></entry><entry><title type="html">What is Jekyll?</title><link href="/2019/10/13/Building-Jekyll-website.html" rel="alternate" type="text/html" title="What is Jekyll?" /><published>2019-10-13T00:00:00+05:30</published><updated>2019-10-13T00:00:00+05:30</updated><id>/2019/10/13/Building-Jekyll-website</id><content type="html" xml:base="/2019/10/13/Building-Jekyll-website.html">&lt;div class=&quot;box&quot;&gt;
&lt;img src=&quot;/assets/images/Jekyll/jekyllLogo.svg&quot; alt=&quot;jekyll-logo&quot; width=&quot;150px&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;

&lt;p&gt;Jekyll is a static site generator. It gives programmatic access to the various tools used for creating static websites. With a prime focus on handling static content, Jekyll, a Ruby gem provides objects to handle various elements present in a web page like&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;content structuring by the use of content asset variablizing (posts, interlinking and intra-linking between and within posts, authors, layout, includes, data, support for Markdown),&lt;/li&gt;
  &lt;li&gt;content styling by the use of style asset variablizing  (CSS, SCSS, SASS) and&lt;/li&gt;
  &lt;li&gt;multimedia asset handling by the use of global placeholders (for images, Java Scripts)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/static-assets.svg&quot; alt=&quot;Jekyll the Content Keeper&quot; title=&quot;Image taken from ... &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Find the source of the above image #TODO&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-static-website&quot;&gt;What is a static website?&lt;/h2&gt;
&lt;p&gt;In simple terms, static websites are read only websites. The tools required for such websites include but not limited to the standard web tools like HTML, CSS, JS. Historically, static websites generation involved tools used for making complex websites like databases for content handling, preprocessors for generating the HTML content using PHP, serving the content using server all combined in a package called LAMP (Linux Apache MySQL PHP), WAMP (Windows Apache MySQL PHP). Howver, this posed high maintenance overhead in terms of security, upgradation. As a website administrator, a simple no-frills solution with source code based on simple text files was a great boon. Jekyll is one among the new generation of static site generators.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-dynamic-website&quot;&gt;What is a dynamic website?&lt;/h2&gt;
&lt;p&gt;Responsive websites which have forms, have preprocessing tools liks PHP&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-jekyll-is-not&quot;&gt;What Jekyll is &lt;strong&gt;not&lt;/strong&gt;?&lt;/h2&gt;

&lt;p&gt;Jekyll cannot generator responsive websites. Webpages that enable server side heavy duty programming tasks like cloud computation (what it is #TODO), graphic rendering. As such, it is intended to make websites which are read only, journal keeping as typical in  the case of Wordpress-based webpages.&lt;/p&gt;

&lt;p&gt;Responsiveness from readers can be added in the form of widgets like Disqus widgets. which essentially is a link to the disqus server that does the processing. My feeling is that a java script handles such responses.&lt;/p&gt;

&lt;p&gt;In that way, Jekyll can partially generate responsive websites with the help of JS&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;which-jekyll&quot;&gt;Which Jekyll?&lt;/h2&gt;

&lt;p&gt;Jekyll v4 is production ready using HTML5, CSS3 and JS(version ?).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;why-jekyll-why-not-others&quot;&gt;Why Jekyll? Why not others?&lt;/h2&gt;

&lt;p&gt;Other static generators like Python based Zim Desktop wiki also generate static sites. However Jekyll offers a seamless integration of desktop and web interfaces in the form of support for Markdown, version control using Git and easy deployment to GitHub for web hosting, and content editing using Atom text editor.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-are-static-assets&quot;&gt;What are static assets?&lt;/h2&gt;

&lt;p&gt;HTML, CSS, JS&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">An introduction to Jekyll, an awesome static website generator.</summary></entry><entry><title type="html">Python Scripts to set static or dynamic IP address</title><link href="/2019/09/30/Scripts-to-set-IP-Address-Statically-or-Dynamically.html" rel="alternate" type="text/html" title="Python Scripts to set static or dynamic  IP address" /><published>2019-09-30T00:00:00+05:30</published><updated>2019-09-30T00:00:00+05:30</updated><id>/2019/09/30/Scripts-to-set-IP-Address-Statically-or-Dynamically</id><content type="html" xml:base="/2019/09/30/Scripts-to-set-IP-Address-Statically-or-Dynamically.html">&lt;div class=&quot;box&quot;&gt;
&lt;img src=&quot;/assets/images/Python/pythonLogo.svg&quot; alt=&quot;python-logo&quot; width=&quot;150px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;The reason to set up a &lt;a href=&quot;/2019/08/25/ADSL-modem+router-as-WAP.html&quot;&gt;ADSL router as a switch&lt;/a&gt; was to enhance the WiFi signal at my office desk. However sometimes I need to switch back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;iiscwlan&lt;/code&gt; WiFi interface when I move my laptop.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;setting-dynamic-ip&quot;&gt;Setting dynamic IP&lt;/h2&gt;

&lt;p&gt;Firstly my laptop WiFi adaptor has connected to the &lt;code class=&quot;highlighter-rouge&quot;&gt;wololo&lt;/code&gt; WAP of the ADSL modem+router&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetDynamicIPusingPowershell0.png&quot; alt=&quot;Connected to wololo interface&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Disconnect from the &lt;code class=&quot;highlighter-rouge&quot;&gt;wololo&lt;/code&gt; WAP&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetDynamicIPusingPowershell1.png&quot; alt=&quot;WiFi interface is floating&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enable the &lt;code class=&quot;highlighter-rouge&quot;&gt;WiFi&lt;/code&gt; interface to have DHCP enabled&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Get-NetAdapter -Name WiFi | Set-NetIPInterface -Dhcp Enabled&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetDynamicIPusingPowershell2.png&quot; alt=&quot;DHCP is enabled&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Connect to the &lt;code class=&quot;highlighter-rouge&quot;&gt;iiscwlan&lt;/code&gt; WAP. The DHCP server at &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.240.1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.1&lt;/code&gt; dynamically assigns &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.240.122&lt;/code&gt; IP Address to the WiFi interface having index &lt;code class=&quot;highlighter-rouge&quot;&gt;17&lt;/code&gt; and alias  &lt;code class=&quot;highlighter-rouge&quot;&gt;WiFi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetDynamicIPusingPowershell3.png&quot; alt=&quot;Set IP dynamically&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice the DNS servers set to &lt;code class=&quot;highlighter-rouge&quot;&gt;10.16.25.13&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;10.16.25.15&lt;/code&gt;. However sometimes these are not set and need to be fetched from the DHCP servers&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Set-DnsClientServerAddress -InterfaceIndex 17 -ResetServerAddresses&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetDynamicIPusingPowershell4.png&quot; alt=&quot;Set DHCP servers dynamically&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this way, the IP set dynamically. Thats it!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;setting-static-ip&quot;&gt;Setting static IP&lt;/h2&gt;

&lt;p&gt;Run a powershell as an Administrator and check the interface index for the WiFi interface. The Interface has index &lt;code class=&quot;highlighter-rouge&quot;&gt;17&lt;/code&gt; with alias &lt;code class=&quot;highlighter-rouge&quot;&gt;WiFi&lt;/code&gt;. It is connected to the &lt;code class=&quot;highlighter-rouge&quot;&gt;iiscwlan&lt;/code&gt; WAP using the IP address &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.240.122&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetNetIPConfiguration&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetStaticIPusingPowershell0.png&quot; alt=&quot;Check the interface parameters&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Disconnect from the &lt;code class=&quot;highlighter-rouge&quot;&gt;iiscwlan&lt;/code&gt; WAP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetStaticIPusingPowershell1.png&quot; alt=&quot;Interface is disconnected&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To connect to the &lt;code class=&quot;highlighter-rouge&quot;&gt;wololo&lt;/code&gt; WAP we need to know its network address. We know it belongs to &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.x&lt;/code&gt; network address with the available IP addresss starting from &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.16-255&lt;/code&gt; as the router addresss is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.1&lt;/code&gt;. Let us set the IP address of the &lt;code class=&quot;highlighter-rouge&quot;&gt;WiFi&lt;/code&gt; interface to belong to this range. Let us reserve &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.16&lt;/code&gt; for the desktop computer’s ethernet interface.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;New-NetIPAddress -InterfaceIndex 17 -IPAddress 10.43.79.17 -PrefixLength 24 -DefaultGateway 10.43.79.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This pops a &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows System Error 87&lt;/code&gt; which says that the default Gateway already exists. Let us remove the Default Gateway option and try again&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;New-NetIPAddress -InterfaceIndex 17 -IPAddress 10.43.79.17 -PrefixLength 24&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Again pops up an &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows System Error 87&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetStaticIPusingPowershell2.png&quot; alt=&quot;Set the static IP fails&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To resolve this first connect to the &lt;code class=&quot;highlighter-rouge&quot;&gt;wololo&lt;/code&gt; WAP then execute the command without the default gateway as already the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;iiscwlan&lt;/code&gt; WAP had the same default gateway &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetStaticIPusingPowershell3.png&quot; alt=&quot;Set the static IP passes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We need to set the DNS servers.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Set-DnsClientServerAddress -InterfaceIndex 17 -ServerAddresses 10.16.25.13, 10.16.25.15&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetStaticIPusingPowershell4.png&quot; alt=&quot;Set the DNS server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this way, the IP set statically. Thats it!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;setting-the-ip-address-dynamically-using-a-python-script&quot;&gt;Setting the IP address dynamically using a Python script&lt;/h2&gt;

&lt;p&gt;Entering these commands is useful. However due to the correct sequence required as well as accuracy requirements, it is better to have a script individually for the static or dynamic setting of IP addresses.&lt;/p&gt;

&lt;p&gt;Thanks to Python’s scripting capability to handle system command execution, we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;subprocess&lt;/code&gt; module for the task&lt;/p&gt;

&lt;h3 id=&quot;python-script-to-set-static-ip&quot;&gt;Python script to set Static IP&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!python
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'''Script to set Static IP to the WiFi adaptor of laptop.
 so that it belongs to the same network address range
  as that of the WAP of the router configured to work like a switch.'''&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;staticIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''netsh interface ip set address name=&quot;WiFi&quot; static 10.43.79.17 255.255.255.0 10.43.79.1'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;staticDNS1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''netsh interface ip set dns name=&quot;WiFi&quot; static 10.16.25.13'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticDNS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;staticDNS2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''netsh interface ip add dns name=&quot;WiFi&quot; 10.16.25.15 index=2'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticDNS2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;python-script-to-set-dynamic-ip&quot;&gt;Python script to set Dynamic IP&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!python
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'''Script to set Dynamic IP to the WiFi adaptor of laptop
 so that it auto configure to have an IP address that
 belongs to the same network address as that of the iiscwlan WAP.'''&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dhcpCommand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''netsh interface ip set address &quot;WiFi&quot; dhcp'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dhcpCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">A tutorial on setting static and dynamic IP address when routing via ADSL router</summary></entry><entry><title type="html">History of fonts</title><link href="/2019/09/27/fonts.html" rel="alternate" type="text/html" title="History of fonts" /><published>2019-09-27T00:00:00+05:30</published><updated>2019-09-27T00:00:00+05:30</updated><id>/2019/09/27/fonts</id><content type="html" xml:base="/2019/09/27/fonts.html">&lt;div class=&quot;box&quot;&gt;
&lt;img src=&quot;/assets/images/Fonts/fontsLogo.svg&quot; alt=&quot;fonts-logo&quot; width=&quot;150px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;The origin of fonts dates back to the Egyptian heiroglyphs. Heiroglyph (&lt;em&gt;heiros glypho&lt;/em&gt; meaning sacred carving) forms a set of symbols to represent ideas and emotions. From the symbolic representation of ideas, language was codified using alphabet to have more efficient representation. Alphabet is also a set of symbols. However, they differ from the heiroglyphs in the sense that instead of a single glyph representing a single idea in the case of heiroglyph, an ordered group of glyphs is used to represent an idea. This ordered group of glyph is called a &lt;strong&gt;word&lt;/strong&gt;. Since alphabet need to be carved just the same as heiroglyphs, alphabet provided a freedom of expression allowing slight modifications to the standard template or design allowing designers a medium for expressing sub-emotions and sub-culture. An alphabet with a specific collection of glyphs makes a &lt;strong&gt;font&lt;/strong&gt;. There are other characteristics to glyphs and placement of glyphs. Fonts can be classified based on some characteristics like common glyph template. Such grouping of fonts is called a &lt;strong&gt;typeface&lt;/strong&gt; or &lt;strong&gt;font-family&lt;/strong&gt;. So an &lt;strong&gt;Avenir Light Standard&lt;/strong&gt; belongs to the &lt;strong&gt;Avenir&lt;/strong&gt; typeface/font family which has other fonts like &lt;strong&gt;Avenir Book&lt;/strong&gt;, &lt;strong&gt;Avenir Condensed&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;font-categories&quot;&gt;Font categories&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Vox-ATypI_classification&quot;&gt;Vox-ATypl classification&lt;/a&gt; was first classification of the typefaces carried out in 1954 by Maximillien Vox organizing the typefaces into 10 general categories. Later British Standards based their type classification on the former system and categorized them into 3 classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Classicals which subclassified into Humanist, Garaldes and Transitional&lt;/li&gt;
  &lt;li&gt;Moderns which include Modern Serif, Slab Serif, Grotesque, Neo Grotesque, Geometric Sans, Humanist Sans Serif&lt;/li&gt;
  &lt;li&gt;Calligraphics subdivided into Glyphyic, Script, Graphic, Blackletter and Gaelic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However this classification is subject to interpretation. Some resources classify based on the standard characteristics into Sans Serif, Serif, Slab Serif, Script, Display and Blackletter. &lt;a href=&quot;https://www.azfonts.net/&quot;&gt;A-Zfonts&lt;/a&gt; uses such classification.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;geometric-typefaces&quot;&gt;Geometric typefaces&lt;/h2&gt;

&lt;p&gt;Geometric typefaces take inspiration from elements of geometry; circle, equilateral triangle and square. They are major-sub-classified into&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Geometric Sans which include Avenir, Futura&lt;/li&gt;
  &lt;li&gt;Geometric Slab Serif include Rockwell, Memphis, Stymie&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;poster-typefaces&quot;&gt;Poster typefaces&lt;/h2&gt;

&lt;h2 id=&quot;font-foundries&quot;&gt;Font foundries&lt;/h2&gt;

&lt;p&gt;Adobe, Microsoft, Apple, Monotype are the major foundries.&lt;/p&gt;

&lt;p&gt;Adobe’s famous typefaces include Futura, Helvetica, Avenir,&lt;/p&gt;

&lt;p&gt;Monotype’s famous typefaces include Arial,&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">A brief history of fonts and in particular the geometric typefaces.</summary></entry></feed>