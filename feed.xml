<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-05-25T05:00:05+05:30</updated><id>/feed.xml</id><entry><title type="html">References for learning C++</title><link href="/2020/05/24/C++-definitive-references.html" rel="alternate" type="text/html" title="References for learning C++" /><published>2020-05-24T00:00:00+05:30</published><updated>2020-05-24T00:00:00+05:30</updated><id>/2020/05/24/C++-definitive-references</id><content type="html" xml:base="/2020/05/24/C++-definitive-references.html">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.learncpp.com/&quot;&gt;Learncpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;SO Book Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">Learncpp SO Book Guide</summary></entry><entry><title type="html">Introducing Spintronics</title><link href="/2020/05/24/spintronics.html" rel="alternate" type="text/html" title="Introducing Spintronics" /><published>2020-05-24T00:00:00+05:30</published><updated>2020-05-24T00:00:00+05:30</updated><id>/2020/05/24/spintronics</id><content type="html" xml:base="/2020/05/24/spintronics.html">&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Maekawa Spin Electronics&lt;/li&gt;
  &lt;li&gt;Marrows&lt;/li&gt;
  &lt;li&gt;JAC Bland&lt;/li&gt;
&lt;/ul&gt;</content><author><name>fubar</name></author><category term="physics" /><summary type="html">We probe, control and thereby manipulate the spin degree of freedom of the electron to affect various processes ranging from information storage, transfer and processing.</summary></entry><entry><title type="html">Trace Bitmap tool in Inkscape: A tutorial</title><link href="/2020/05/24/trace-bitmap-in-inkscape.html" rel="alternate" type="text/html" title="Trace Bitmap tool in Inkscape: A tutorial" /><published>2020-05-24T00:00:00+05:30</published><updated>2020-05-24T00:00:00+05:30</updated><id>/2020/05/24/trace-bitmap-in-inkscape</id><content type="html" xml:base="/2020/05/24/trace-bitmap-in-inkscape.html">&lt;div class=&quot;box&quot;&gt;
&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_08.png&quot; alt=&quot;boats-and-lake&quot; width=&quot;150px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;One of the beautiful tools of Inkscape is to generate vectorized versions of raster images formats like &lt;code class=&quot;highlighter-rouge&quot;&gt;.png&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.jpg&lt;/code&gt;. This is a simple tutorial to demonstrate the workflow. For the demonstration, we will use any of the daily updated Windows Welcome Screen. When we log in to the Windows, the Welcome Screen shows a beautiful landscape and we can vote for the daily update. Depending on our tastes, Windows selects a particular genre for the images. My inclination is towards nature imagery, without the presence of human derived structures or humans itself. Now to access the location where the images are stored is a bit tricky. After following the tutorial on &lt;a href=&quot;https://www.laptopmag.com/articles/find-windows-10-lock-screen-pictures&quot;&gt;Windows 10 Spotlight LockScreen pictures&lt;/a&gt;, I could access my laptop’s welcome screen images. I created a desktop shortcut to the location for easy access in the future. Let’s get started with generating the vectorized version of one of these beautiful curated sceneries.&lt;/p&gt;

&lt;h2 id=&quot;trace-bitmap-tutorial&quot;&gt;Trace BitMap Tutorial&lt;/h2&gt;

&lt;p&gt;Firstly import the &lt;code class=&quot;highlighter-rouge&quot;&gt;.png&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.jpg&lt;/code&gt; into a new Inkscape project. The productivity in using Inkscape is enhanced by using shortcuts. Slowly with experience, one gets used to the shortcuts. For importing, use &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+I&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_00.png&quot; alt=&quot;import-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Path&lt;/code&gt; menu item, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Trace BitMap&lt;/code&gt; tool. You have the option of creating single scan or multiple scans. A single scan creates a single path object and multiple scan creates group of paths. Create a multiple scan with 8 reduced colors. The algorithm appropriately chooses the reduced colors from the color spectrum of the image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_01.png&quot; alt=&quot;trace-bitmap-dialog-options&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The vector image is a group of 8 paths.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_02.png&quot; alt=&quot;vectorized-bitmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To view the paths, let us ungroup them using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Ungroup&lt;/code&gt; tool of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; menu. The short cut is &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift+Ctrl+G&lt;/code&gt;. Note that the vector should be selected first. After ungrouping each of the paths is a background with a reduced color with a &lt;strong&gt;clip&lt;/strong&gt; (What are &lt;a href=&quot;#&quot;&gt;clips&lt;/a&gt;? #TODO)depicting the contour for the corresponding color. So the total vector image is a combination of cascaded contours of reduced colors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_03.png&quot; alt=&quot;contours-of-vector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is more easily understood by taking a simpler raster image. Below depicts the angular part of the orbital of hydrogen atom. This is generated using Mayavi, a python package for 3D visualization. The code is very simple and is explained elsewhere (#TODO write post for mayavi tutorial)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_04.jpg&quot; alt=&quot;1s-orbital&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us apply the same Trace Bitmap tool and vectorize the orbital with only 4 reduced color. This is shown to the right of the first column. After ungrouping the vector paths and separating the paths, we can see it is made up a cascaded contours as shown in the middle figure. For more clarity, the paths for each reduced color are projected in perspective with subpar opacity which clearly highlights the cascaded nature of the paths as shown in last row. The projection of the paths onto perspective determined by the parallelogram drawn in the last row is done by &lt;code class=&quot;highlighter-rouge&quot;&gt;Perpective&lt;/code&gt; tool in &lt;code class=&quot;highlighter-rouge&quot;&gt;Extensions&lt;/code&gt; menu item. The &lt;a href=&quot;#&quot;&gt;tutorial for Perspective&lt;/a&gt; #TODO is here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_05.png&quot; alt=&quot;contours-of-1s-orbital&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coming back to the nature scenery, since we have ungrouped the vector, let us select the original raster image again and generate a new vector image. Now select the vector image and let us export the vector image to png. Using  &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift+Ctrl-E&lt;/code&gt; shortcut. Set the export options like &lt;code class=&quot;highlighter-rouge&quot;&gt;Selection&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dpi&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Filename&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_06.png&quot; alt=&quot;export-png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The final vector image is below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Inkscape/TraceBitMap_07.png&quot; alt=&quot;vector-image&quot; /&gt;&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">Let us use `Trace Bitmap` tool of Path toolset to generate vectorized versions of raster images</summary></entry><entry><title type="html">How to build Jekyll website on WINDOWS</title><link href="/2020/05/24/workflow-for-building-jekyll-website.html" rel="alternate" type="text/html" title="How to build Jekyll website on WINDOWS" /><published>2020-05-24T00:00:00+05:30</published><updated>2020-05-24T00:00:00+05:30</updated><id>/2020/05/24/workflow-for-building-jekyll-website</id><content type="html" xml:base="/2020/05/24/workflow-for-building-jekyll-website.html">&lt;div class=&quot;box&quot;&gt;
&lt;img src=&quot;/assets/images/Jekyll/JekyllLogo.png&quot; alt=&quot;Jekyll-logo&quot; width=&quot;150px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;unexpected-motivation-windows-subsystem-for-linux&quot;&gt;Unexpected motivation: Windows Subsystem for Linux&lt;/h2&gt;

&lt;p&gt;My motivation to try out Jekyll is twofold. The first revolves around a possibility to revive my lost touch with GNU/Linux OS. The other is the promise of Jekyll to have programmatic control over building websites. These are interlinked. But I would like to present a perspective.&lt;/p&gt;

&lt;p&gt;I like to work on GNU/Linux distribution. In my undergraduate studies, I mostly explored the Ubuntu operating system, which is Debian based operating system. Debian itself is a GNU/Linux distribution. However in my PhD, I bought a Dell Inspiron 7348 13 inch laptop which had Windows preinstalled. I wished for a Ubuntu version, but unfortunately it was not available in the market in my home country, India. I was not confident of flashing the hard disk and install my custom version of Ubuntu as I was new to laptops and read in the Internet that GNU/Linux OSes are not stable in laptops because the certain hardware components like networking related in a laptop still dont have open source drivers that are supported by the OEMs (Original Equipment Manufacturers). This was the story back in the year 2015. Anyways, the long story short is that I stuck to Windows OS even though I was not happy till I came know of Windows Subsystem for Linux. Using Linux in Windows as virtual machine using &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt; was promising but was resource heavy in terms of memory and overall feeling was of slow performance. As a result&lt;/p&gt;

&lt;p&gt;Windows Subsystem for Linux (WSL) promised to bridge the communities of the Windows and GNU/Linux world and provide commonly used GNU/Linux tools on the Windows platform. This was an output of very smart people and hinted at the importance of open source community in driving innovation. Also surprisingly, this sent an alarm across the open source community about the &lt;a href=&quot;https://itsfoss.com/windows-linux-kernel-wsl-2/&quot;&gt;impending death of open source development&lt;/a&gt;.. Till now most of the software development was mutually disjoint into the proprietary world and the open source world.&lt;/p&gt;

&lt;h2 id=&quot;expected-motivation-jekyll&quot;&gt;Expected Motivation: Jekyll&lt;/h2&gt;

&lt;p&gt;Earlier I used to build my website using &lt;a href=&quot;https://www.glump.net/software/zim-windows&quot;&gt;Zim desktop wiki&lt;/a&gt;. Zim is a great tool. It actually helped me learned some aspects of Application Programmers Interfaces (APIs) after going through its source code. But it was not difficult to realize the limitations of such workflows as using Zim or Wordpress after reading an article by Andrej Karpathy to &lt;a href=&quot;https://karpathy.github.io/2014/07/01/switching-to-jekyll/&quot;&gt;switch from Wordpress to Jekyll&lt;/a&gt;. Wordpress site is built on a database, which itself is binary and prone to security threats. In retrospection/hindsight, Zim does not have programmatic control over the variables of the site like the authors, posts, tags and titles.&lt;/p&gt;

&lt;p&gt;My testimonial to Zim written at the forum in September of 2019.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My motivation to migrate from Zim to &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll&lt;/a&gt; actually involved a cascade of events primarily starting from a desire to version control my PhD thesis. As a result I fleeted along various tools like &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; (for versioning content), &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax#philosophy&quot;&gt;markdown&lt;/a&gt; (for structuring content), &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; (for editing content) and Jekyll (for viewing content). The GCD (upside) of these tools turned out to be &lt;strong&gt;seamless platform (desktop/web) agnostic content-keeping&lt;/strong&gt;. The LCM (downside) is the larger footprint compared to the much leaner Zim. Since Zim restrains itself by being a &lt;strong&gt;desktop wiki&lt;/strong&gt;, I was more convinced to make the migration after reading a &lt;a href=&quot;https://github.com/zim-desktop-wiki/zim-desktop-wiki/issues/26&quot;&gt;GitHub issue that discusses Zim lacks markdown support&lt;/a&gt;. After reading a &lt;a href=&quot;https://v4.chriskrycho.com/2015/academic-markdown-and-citations.html&quot;&gt;post on an academic writing workflow&lt;/a&gt; by Chris Krycho using markdown with the support of &lt;a href=&quot;https://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt; (for interdocument conversion), I started the migration. Jekyll is only a part of the process.
   Notwithstanding my perceived limitations of Zim, as a testimony, I would like to share that Zim helped me learn a lot about web tools (like wiki functioning, html, thrill of creating your own site with fivethirtyeight theme :D (I still use it for my site)), content-keeping (like interlinking notebooks), API usage (my first serious foray into reading source codes was through Zim. I managed to extend Zim’s functionality, along with some web scraping Python modules, to setup up a Mendeley like interface of many-to-many mappings between Authors, Titles and Years :D).
  On a philosophical note, &lt;strong&gt;Zim is but a bead in the process of evolution of content-keeping&lt;/strong&gt;. It is neither the beginning nor the end. Its a long way to go where the GCD equals the LCM (the ultimate non duality) ;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us get started with building Jekyll generated static sites on Windows.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;requirements-of-jekyll&quot;&gt;Requirements of Jekyll&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;Git(optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is a static site generator. It is assumed that the site we intend to create is a collection of posts. We can order the posts based on the creation date, the authors of the posts, the tags that represent the post content. The design philosophy for the site can also be materialied using other site generators like Wordpress or offline static generators like &lt;a href=&quot;https://www.glump.net/software/zim-windows&quot;&gt;Zim desktop wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we focus on the build process of the website rather than the philosophy of Jekyll. For more information on how Jekyll works, refer to the post &lt;a href=&quot;/2019/10/13/Building-Jekyll-website.html&quot;&gt;What is Jekyll?&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ruby&quot;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;Jekyll is a Ruby gem based on Ruby programming language. However there is no need to know Ruby to build our site. What we need however is Ruby installed on Windows OS. Now there are &lt;a href=&quot;https://jekyllrb.com/docs/installation/windows/&quot;&gt;two options&lt;/a&gt; for a Ruby installation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A native installation of Ruby for Windows&lt;/li&gt;
  &lt;li&gt;A Linux based installation in the Windows subsystem for Linux (WSL).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I personally was thrilled with the second option. This led me for the first time to explore &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/about&quot;&gt;Windows Subsystem for Linux&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Windows Subsystem for Linux is a GNU/Linux environment &lt;strong&gt;directly&lt;/strong&gt; in Windows &lt;strong&gt;without the overhead of running a virtual machine&lt;/strong&gt;. This is something that baffled most of the development communities of both open source and closed source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;WSL needs Windows to run on Insider Preview mode. This allows to activate WSL as an optional feature. After activating the WSL, &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;install a GNU/Linux distribution on Windows&lt;/a&gt;. I chose Ubuntu 18.04 LTS. After a successful installation of Ubuntu 18.04, you can start literally open &lt;strong&gt;Bash terminal on Windows&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now &lt;a href=&quot;https://jekyllrb.com/docs/installation/windows/&quot;&gt;install the Jekyll Ruby gem&lt;/a&gt; on WSL as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Jekyll/JekyllBuildWebsite_00.png&quot; alt=&quot;install-Jekyll&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gitoptional&quot;&gt;Git(optional)&lt;/h3&gt;

&lt;p&gt;Though the version control is not necessary, it has its own benefits. Creation of contents is not a one time affair, and we need to incrementally revise our content and maybe revert back to previous versions of content. In such circumstances versioning your content saves your skin.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;Git for windows&lt;/a&gt; installation is straightforware. However knowing how to use Git is &lt;strong&gt;not&lt;/strong&gt;. It has steep enough learning curve, but once a working knowledge is acquired, there is no going back.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;setup-a-jekyll-website&quot;&gt;Setup a Jekyll website&lt;/h2&gt;

&lt;p&gt;Jekyll supports gem based themes for the website, which outline the structure of the website and its styling. The structure conveys how the posts are stored, how the authors of the posts hyperlinked to the posts, if there are any tags  to the posts that can be sieved. However, we will follow the basic route and not rely on these theme. Instead let us &lt;a href=&quot;https://jekyllrb.com/docs/step-by-step/01-setup/&quot;&gt;setup a website from scratch&lt;/a&gt;. The folder structure of our website will look something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Jekyll/JekyllBuildWebsite_01.png&quot; alt=&quot;website-structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The core components of the website are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;root&amp;gt;&lt;/code&gt; directory which holds the source code of the site. It can have any name.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.config.yml&lt;/code&gt; A YAML file that describes how the site is configured.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; that lists the Ruby dependencies of the sites.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; A file that freezes the version changes of dependencies so that site can be constructed across platforms and system. This is similar to a &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file used during installing a python virtual environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A build of site is an iterative process where each iteration involves four steps,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Creating content for the site; in our case in the form of posts.&lt;/li&gt;
  &lt;li&gt;Checking if the content and the styling of the site is proper by running the site on a local server. This is called &lt;strong&gt;development version&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Once things are in order, committing the incremental creation to a version control system.&lt;/li&gt;
  &lt;li&gt;Finally deploying the site on a real server or production server. This means others on the internet can access your website. This is called &lt;strong&gt;production version&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us discuss these steps below.&lt;/p&gt;

&lt;h3 id=&quot;creating-posts&quot;&gt;Creating posts&lt;/h3&gt;

&lt;p&gt;Go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory and create a post. Jekyll posts support markdown. A valid format for the name of the post is&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Year-Month-Date-name-of-post.md
2020-05-24-how-to-build-jekyll.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;serve-the-site-on-a-local-server&quot;&gt;Serve the site on a local server&lt;/h3&gt;
&lt;p&gt;After creating the content, to check how the site would appear if deployed on production servers, we can serve the site from a local server provided by Jekyll by&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.../root$bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The site can then be accessed at &lt;code class=&quot;highlighter-rouge&quot;&gt;http:localhost:4000&lt;/code&gt;. We can keeping modifying content even when the site is running. This is an &lt;strong&gt;awesome feature&lt;/strong&gt; of Jekyll and is called &lt;strong&gt;incremental-build&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;versioning-the-site&quot;&gt;Versioning the site&lt;/h3&gt;

&lt;p&gt;Once you are satisfied with how the site is deployed, stop the server. Now it is a good idea to version control the site using Git. If not already initialized, initialize the git repository in the directory where the root of the site resides. We have named the root of the directory as &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; itself.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;parent-directory-of-site's-root&amp;gt;$git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;build-the-site-for-production&quot;&gt;Build the site for production&lt;/h3&gt;

&lt;p&gt;Now generate the site for production using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JEKYLL=bundle exec jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This generates a &lt;code class=&quot;highlighter-rouge&quot;&gt;sites&lt;/code&gt; directory in the &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; directory.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;workflows-for-building-the-site&quot;&gt;Workflows for building the site&lt;/h1&gt;

&lt;p&gt;There are two workflows for building the site. The first involves simple configuration but many steps during deployment. The second involves lengthy configuration but simple click deployment. Common to both the posts are creating the post and checking the site on local server. What differs is how we version control the site and its source code and how we deploy the production ready site.&lt;/p&gt;

&lt;h2 id=&quot;simple-workflow&quot;&gt;Simple workflow&lt;/h2&gt;

&lt;p&gt;Basically in the simple workflow we separate the source code of the site from the site ready for production. To accomplish, we have two gitted repositories; one for the source and the other for the deployment&lt;/p&gt;

&lt;h3 id=&quot;source-side-git-repository&quot;&gt;Source side git repository&lt;/h3&gt;

&lt;p&gt;If not already initialized, initialized a git repository in the directory which contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; of the site’s source code. Also create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file to exclude the built site at &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; and other cache files of Jekyll as shown below&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;parent-directory-of-site's-root&amp;gt;$git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Jekyll/JekyllBuildWebsite_02.png&quot; alt=&quot;simple-workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now after an incremental creation of site and cross checking in the local server, when it is time to version control the site, commit to the repository by&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git commit -m &quot;my nth post&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now build the site using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$bundle exec jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory which holds the site files. These need to copied with delta copy algorithm to the Server side repository.&lt;/p&gt;

&lt;h3 id=&quot;server-side-git-repository&quot;&gt;Server side git repository&lt;/h3&gt;

&lt;p&gt;I want to push my site files to the GitHub using the GitHub’s website hosting service. Basically a repository named &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;GitHubusername&amp;gt;.github.io&lt;/code&gt; can host your website automatically. This is possible due to the &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub pages&lt;/code&gt; website hosting &lt;strong&gt;service&lt;/strong&gt;. My username on GitHub is baalkikhaal. Once I create a repository named baalkikhaal.github.io in my profile I will clone it on my local computer using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;server-side-git-repository-parent-directory&amp;gt;$git clone https://github.com/Baalkikhaal/Baalkikhaal.github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates a local copy of the server side repository at &lt;code class=&quot;highlighter-rouge&quot;&gt;...Sites/Baalkikhaal.github.io&lt;/code&gt; directory. This directory contains only the site files which are there at production server on GitHub site. Additionally it has git files like &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; directory. In this way I have copy of the server side of the site.&lt;/p&gt;

&lt;p&gt;Since I have created an incremental content in the source side repository and built the site also there will be additional files in the source side in comparison to server side as shown below by listing the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;.../homepage/root/_site&lt;/code&gt; source side directory and &lt;code class=&quot;highlighter-rouge&quot;&gt;.../Sites/Baalkikhaal.github.io&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -al&lt;/code&gt; command as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Jekyll/JekyllBuildWebsite_03.png&quot; alt=&quot;files-to-sync&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All I have to do is transfer my site files here from the source side. For this I will &lt;strong&gt;delta copy&lt;/strong&gt; my site files from source side using &lt;code class=&quot;highlighter-rouge&quot;&gt;rsync&lt;/code&gt; command. &lt;code class=&quot;highlighter-rouge&quot;&gt;rsync&lt;/code&gt; uses delta-copy algorithm and preserves the flags of the file like creation date and modification date. In this way, unmodified files in the site will not be recopied thereby avoiding unnecessary overhead during incremental commits&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$rsync -av dir1/ dir2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this command copies the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;dir1&lt;/code&gt; excluding the &lt;code class=&quot;highlighter-rouge&quot;&gt;dir1&lt;/code&gt; perse into the &lt;code class=&quot;highlighter-rouge&quot;&gt;dir2&lt;/code&gt;. This is done below to transfer the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;.../homepage/root/_site/&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;.../Sites/Baalkikhaal.github.io/&lt;/code&gt;. Specifically the command used is shown below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Jekyll/JekyllBuildWebsite_04.png&quot; alt=&quot;files-are-synced&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that the files are added to the server side repository, it is time to commit the files to the git. After doing the commit similar to that done in source side repository. It is time to push the commit to the production server hosted at GitHub using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The meaning of this command is explained in the &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&quot;&gt;Git tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;github-pages-workflow&quot;&gt;GitHub pages workflow&lt;/h2&gt;

&lt;p&gt;Refer &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt; for setting up this workflow. It involves tedious configuration steps, but once the site is configured, it is simple click to deploy the site for production unlike the &lt;em&gt;Simple Workflow&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">Let us use web development tools hosted on the Windows Subsystem for Linux to build static websites eventually to be hosted on GitHub.</summary></entry><entry><title type="html">Cheat sheet for GIT</title><link href="/2020/05/23/Git-Command-Cheat-Sheet.html" rel="alternate" type="text/html" title="Cheat sheet for GIT" /><published>2020-05-23T00:00:00+05:30</published><updated>2020-05-23T00:00:00+05:30</updated><id>/2020/05/23/Git-Command-Cheat-Sheet</id><content type="html" xml:base="/2020/05/23/Git-Command-Cheat-Sheet.html">&lt;h1 id=&quot;beginner-level-git-command-cheat-sheet&quot;&gt;Beginner level GIT command cheat sheet&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;local/dir/path&amp;gt;$git clone &amp;lt;path/to/repository&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This accesses the remote git repository and clones it at the local directory path &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;local/dir/path&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git restore .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Suppose you did some changes to existing files and now intend have a clean slate of the working directory restored upto the last commit. As long as you have not done a commit yet, you are safe simply use the &lt;code class=&quot;highlighter-rouge&quot;&gt;restore&lt;/code&gt; command to erase the modifications.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git clean [-n] [-f] [-d]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have added new files which are not yet tracked then restore will not work. You need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;clean&lt;/code&gt; command. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; flag will list the files that can be possibly cleaned if the &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; flag is used. So &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; will clean the files whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; will clean the directories. This is useful when you do an error in copying files to the working directory and dont intend to keep the files.&lt;/p&gt;

&lt;p&gt;This is taken from this &lt;a href=&quot;https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree&quot;&gt;SO post&lt;/a&gt;.&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">Beginner level GIT command cheat sheet &amp;lt;local/dir/path&amp;gt;$git clone &amp;lt;path/to/repository&amp;gt; This accesses the remote git repository and clones it at the local directory path &amp;lt;local/dir/path&amp;gt; $git restore . Suppose you did some changes to existing files and now intend have a clean slate of the working directory restored upto the last commit. As long as you have not done a commit yet, you are safe simply use the restore command to erase the modifications. $git clean [-n] [-f] [-d] If you have added new files which are not yet tracked then restore will not work. You need to use clean command. The -n flag will list the files that can be possibly cleaned if the -f flag is used. So -f will clean the files whereas -d will clean the directories. This is useful when you do an error in copying files to the working directory and dont intend to keep the files. This is taken from this SO post.</summary></entry><entry><title type="html">pyVISA on Windows</title><link href="/2019/10/21/Interface-VISA-hardware-with-Windows-using-Python.html" rel="alternate" type="text/html" title="pyVISA on Windows" /><published>2019-10-21T00:00:00+05:30</published><updated>2019-10-21T00:00:00+05:30</updated><id>/2019/10/21/Interface-VISA-hardware-with-Windows-using-Python</id><content type="html" xml:base="/2019/10/21/Interface-VISA-hardware-with-Windows-using-Python.html">&lt;h1 id=&quot;howto-interface-visa-compatible-hardware-using-python&quot;&gt;HOWTO interface VISA compatible hardware using Python&lt;/h1&gt;

&lt;h1 id=&quot;history-of-visa&quot;&gt;History of VISA&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;VISA implementation from National Instruments: NI- VISA&lt;/li&gt;
  &lt;li&gt;Keithley USB488A and USB488B GPIB drivers&lt;/li&gt;
  &lt;li&gt;PyVISA: Python package that is a frontend to the VISA library&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ni--visa&quot;&gt;NI- VISA&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ni.com/en-in/support/downloads/drivers/download.ni-visa.html#305862&quot;&gt;Download: Permanent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ni.com/pdf/manuals/370423a.pdf&quot;&gt;Documentation : Permanent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/documents/PyVISA/National-Instruments-2001-NI-VISA-User-Manual.pdf&quot;&gt;Documentation: Mirror&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;keithley-gpib-to-usb-drivers&quot;&gt;Keithley GPIB to USB drivers&lt;/h1&gt;

&lt;p&gt;488A is older version of the GPIB to USB adaptor. The driver development is supported only till Windows 7. So if trying to install the driver on later Windows versions, it might get tricky&lt;/p&gt;

&lt;p&gt;Newer version is 488B&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tek.com/accessory/ki-488/3-1-3-1&quot;&gt;Download KUSB-488B GPIB driver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tek.com/accessory/gpib488/9-2-0&quot;&gt;Download KUSB-488A GPIB driver&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is essential to have no traces of previous installations of either the GPIB2USB drivers or the VISA libraries. This is ensured from checking the device manager  and installed programs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;In case PyVISA-py is already installed in a virtual environment, running
&lt;code class=&quot;highlighter-rouge&quot;&gt;python -m visa info&lt;/code&gt; will list the VISA libraries(either NI’s implementation or PyVISA-py’s own pure Python implemenation).
This check is optional and needed only if one is not sure if the drivers and VISA libraries are completely uninstalled&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;remove-the-previous-installation&quot;&gt;Remove the previous installation&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-00.png&quot; alt=&quot;Before Installation - Remove the VISA libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Plug the Keithley GPIB-USB adaptor and check the device manager listing. The hardware is not listed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-01.png&quot; alt=&quot;Before Installation - Check the device manager&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check the installed programs.  The driver is for KUSB-488B and the hardware is KUSB-USB488A. Hence it is not listed. Unplug the adaptor and remove the installed driver.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-02.png&quot; alt=&quot;Before Installation - Remove the Installed Keithley Driver&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;check-the-system-is-clean&quot;&gt;Check the system is clean&lt;/h2&gt;

&lt;p&gt;Run  ` python -m visa info` and see if the sytem is clean and ready for proper installation&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-03.png&quot; alt=&quot;Before Installation -Check the system is clean 00&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again plug the the Keithley GPIB-USB adaptor and check the device manager listing. This confirms that the system is ready for a proper installation of hardware.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-04.png&quot; alt=&quot;Before Installation -Check the system is clean 01&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-the-keithley-gpib2usb-drivers&quot;&gt;Install the Keithley GPIB2USB drivers&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ensure the hardware is unplugged&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Install the KUSB-488A driver with version 9.2.0. According to the release notes within the source directory,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;it is recommended to install the Keithley’s adaptor driver first followed by the NI’s own GPIB-488.2 driver to avoid vendor design conflict.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-05.png&quot; alt=&quot;Install the GPIB2USB driver 00&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rebooting the computer is a requirement after the completion of installations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-06.png&quot; alt=&quot;Install the GPIB2USB driver 01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After reboot, plug the hardware and check if it is installed in the device manager&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-07.png&quot; alt=&quot;Install the GPIB2USB driver 02&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-the-ni-visa-library&quot;&gt;Install the NI-VISA library&lt;/h2&gt;

&lt;p&gt;Install the NI’s implementation of the VISA specification; version 19.0&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-08.png&quot; alt=&quot;Install NI-VISA library-00&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uncheck the additional services provided by NI as these will only increase the number of unneccessary processes and services running in the background. In the older versions of NI-VISA, the option to uncheck GPIB-488.2 driver from NI was present in the installer. However the current version automatically checks for the GPIB driver pre-installed and accordingly proceeds with the installation to avoid conflict.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-09.png&quot; alt=&quot;Install NI-VISA library-01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After installation, check for the installed components. Check that the GPIB driver is from Maintainer GPIB-488 whereas NI-VISA is from NI itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-10.png&quot; alt=&quot;Install NI-VISA library-02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A successful installation creates &lt;code class=&quot;highlighter-rouge&quot;&gt;visa32.dll&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;visa64.dll&lt;/code&gt; dynamically linked libraries. DLL files are shareable libraries which can be ported as it is across systems offering convience of using software without recompiling on new systems. They act like patches.&lt;/p&gt;

&lt;p&gt;After the installation, look out for the install location; usually the &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\\Windows\system32&lt;/code&gt; and search for &lt;code class=&quot;highlighter-rouge&quot;&gt;visa32.dll&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;visa64.dll&lt;/code&gt;. If they are present there, then PyVISA-py can detect them without fuss. If they are not present there (for some reason), then proceed to the &lt;a href=&quot;##[Digression]-Alternative-Installation-of-VISA-library&quot;&gt;alternative installation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;digression-alternative-installation-of-visa-library&quot;&gt;[Digression] Alternative Installation of VISA library&lt;/h2&gt;

&lt;p&gt;For some reason, my VISA installation has not generated the DLLs at the location. I searched for visa* (* is called a wild card evaluating to any character set like 32.dll or 64.dll) across the WINDOWS directory and found a &lt;code class=&quot;highlighter-rouge&quot;&gt;visa32.dll&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Windows\SysWOW64\visa32.dll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To demonstrate the portability of DLL files, I copied the &lt;code class=&quot;highlighter-rouge&quot;&gt;visa32.dll&lt;/code&gt; to the PyVISA virtual environment (described below) and checked for the detection of the visa library.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -m visa info&lt;/code&gt; lists the detection of the visa32 library at the path of the virtual environment.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;However the bitness of Python installation (64 bit) and that of VISA (32bit) do not match. We need to fix this!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PyVISA/InstallationPyVISA-11.png&quot; alt=&quot;Install NI-VISA library-03&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-a-virtual-environment&quot;&gt;Create a virtual environment&lt;/h2&gt;

&lt;p&gt;Tools available with us:&lt;/p&gt;

&lt;p&gt;32 bit VISAcd&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">HOWTO interface VISA compatible hardware using Python History of VISA Requirements VISA implementation from National Instruments: NI- VISA Keithley USB488A and USB488B GPIB drivers PyVISA: Python package that is a frontend to the VISA library NI- VISA Download: Permanent Documentation : Permanent Documentation: Mirror Keithley GPIB to USB drivers 488A is older version of the GPIB to USB adaptor. The driver development is supported only till Windows 7. So if trying to install the driver on later Windows versions, it might get tricky Newer version is 488B Download KUSB-488B GPIB driver Download KUSB-488A GPIB driver Installation It is essential to have no traces of previous installations of either the GPIB2USB drivers or the VISA libraries. This is ensured from checking the device manager and installed programs. In case PyVISA-py is already installed in a virtual environment, running python -m visa info will list the VISA libraries(either NI’s implementation or PyVISA-py’s own pure Python implemenation). This check is optional and needed only if one is not sure if the drivers and VISA libraries are completely uninstalled Remove the previous installation Plug the Keithley GPIB-USB adaptor and check the device manager listing. The hardware is not listed. Check the installed programs. The driver is for KUSB-488B and the hardware is KUSB-USB488A. Hence it is not listed. Unplug the adaptor and remove the installed driver. Check the system is clean Run ` python -m visa info` and see if the sytem is clean and ready for proper installation Again plug the the Keithley GPIB-USB adaptor and check the device manager listing. This confirms that the system is ready for a proper installation of hardware. Install the Keithley GPIB2USB drivers Ensure the hardware is unplugged Install the KUSB-488A driver with version 9.2.0. According to the release notes within the source directory, it is recommended to install the Keithley’s adaptor driver first followed by the NI’s own GPIB-488.2 driver to avoid vendor design conflict. Rebooting the computer is a requirement after the completion of installations After reboot, plug the hardware and check if it is installed in the device manager Install the NI-VISA library Install the NI’s implementation of the VISA specification; version 19.0 Uncheck the additional services provided by NI as these will only increase the number of unneccessary processes and services running in the background. In the older versions of NI-VISA, the option to uncheck GPIB-488.2 driver from NI was present in the installer. However the current version automatically checks for the GPIB driver pre-installed and accordingly proceeds with the installation to avoid conflict. After installation, check for the installed components. Check that the GPIB driver is from Maintainer GPIB-488 whereas NI-VISA is from NI itself. A successful installation creates visa32.dll and visa64.dll dynamically linked libraries. DLL files are shareable libraries which can be ported as it is across systems offering convience of using software without recompiling on new systems. They act like patches. After the installation, look out for the install location; usually the C:\\Windows\system32 and search for visa32.dll and visa64.dll. If they are present there, then PyVISA-py can detect them without fuss. If they are not present there (for some reason), then proceed to the alternative installation [Digression] Alternative Installation of VISA library For some reason, my VISA installation has not generated the DLLs at the location. I searched for visa* (* is called a wild card evaluating to any character set like 32.dll or 64.dll) across the WINDOWS directory and found a visa32.dll at C:\Windows\SysWOW64\visa32.dll. To demonstrate the portability of DLL files, I copied the visa32.dll to the PyVISA virtual environment (described below) and checked for the detection of the visa library. python -m visa info lists the detection of the visa32 library at the path of the virtual environment. However the bitness of Python installation (64 bit) and that of VISA (32bit) do not match. We need to fix this! Create a virtual environment Tools available with us: 32 bit VISAcd</summary></entry><entry><title type="html">Building a Jekyll Website</title><link href="/2019/10/13/Building-Jekyll-website.html" rel="alternate" type="text/html" title="Building a Jekyll Website" /><published>2019-10-13T00:00:00+05:30</published><updated>2019-10-13T00:00:00+05:30</updated><id>/2019/10/13/Building-Jekyll-website</id><content type="html" xml:base="/2019/10/13/Building-Jekyll-website.html">&lt;h1 id=&quot;what-is-jekyll&quot;&gt;What is jekyll?&lt;/h1&gt;

&lt;h3 id=&quot;keywords-simple-static-blog-aware&quot;&gt;keywords: simple, static, blog aware&lt;/h3&gt;

&lt;p&gt;Jekyll is a static site generator. It gives programmatic access to the various tools used for creating static websites. With a prime focus on handling static content, Jekyll, a Ruby gem provides objects to handle various elements present in a web page like&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;content structuring by the use of content asset variablizing (posts, interlinking and intra-linking between and within posts, authors, layout, includes, data, support for Markdown),&lt;/li&gt;
  &lt;li&gt;content styling by the use of style asset variablizing  (CSS, SCSS, SASS) and&lt;/li&gt;
  &lt;li&gt;multimedia asset handling by the use of global placeholders (for images, Java Scripts)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/static-assets.svg&quot; alt=&quot;Jekyll the Content Keeper&quot; title=&quot;Image taken from ... &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Find the source of the above image #TODO&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-static-website&quot;&gt;What is a static website?&lt;/h2&gt;
&lt;p&gt;In simple terms, static websites are read only websites. The tools required for such websites include but not limited to the standard web tools like HTML, CSS, JS. Historically, static websites generation involved tools used for making complex websites like databases for content handling, preprocessors for generating the HTML content using PHP, serving the content using server all combined in a package called LAMP (Linux Apache MySQL PHP), WAMP (Windows Apache MySQL PHP). Howver, this posed high maintenance overhead in terms of security, upgradation. As a website administrator, a simple no-frills solution with source code based on simple text files was a great boon. Jekyll is one among the new generation of static site generators.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-dynamic-website&quot;&gt;What is a dynamic website?&lt;/h2&gt;
&lt;p&gt;Responsive websites which have forms, have preprocessing tools liks PHP&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;what-jekyll-is-not&quot;&gt;What Jekyll is &lt;strong&gt;not&lt;/strong&gt;?&lt;/h1&gt;

&lt;p&gt;Jekyll cannot generator responsive websites. Webpages that enable server side heavy duty programming tasks like cloud computation (what it is #TODO), graphic rendering. As such, it is intended to make websites which are read only, journal keeping as typical in  the case of Wordpress-based webpages.&lt;/p&gt;

&lt;p&gt;Responsiveness from readers can be added in the form of widgets like Disqus widgets. which essentially is a link to the disqus server that does the processing. My feeling is that a java script handles such responses.&lt;/p&gt;

&lt;p&gt;In that way, Jekyll can partially generate responsive websites with the help of JS&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;which-jekyll&quot;&gt;Which Jekyll?&lt;/h1&gt;

&lt;p&gt;Jekyll v4 is production ready using HTML5, CSS3 and JS(version ?).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;why-jekyll-why-not-others&quot;&gt;Why Jekyll? Why not others?&lt;/h1&gt;

&lt;p&gt;Other static generators like Python based Zim Desktop wiki also generate static sites. However Jekyll offers a seamless integration of desktop and web interfaces in the form of support for Markdown, version control using Git and easy deployment to GitHub for web hosting, and content editing using Atom text editor.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;what-are-static-assets&quot;&gt;What are static assets?&lt;/h1&gt;

&lt;p&gt;HTML, CSS, JS&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">What is jekyll? keywords: simple, static, blog aware Jekyll is a static site generator. It gives programmatic access to the various tools used for creating static websites. With a prime focus on handling static content, Jekyll, a Ruby gem provides objects to handle various elements present in a web page like content structuring by the use of content asset variablizing (posts, interlinking and intra-linking between and within posts, authors, layout, includes, data, support for Markdown), content styling by the use of style asset variablizing (CSS, SCSS, SASS) and multimedia asset handling by the use of global placeholders (for images, Java Scripts) Find the source of the above image #TODO What is a static website? In simple terms, static websites are read only websites. The tools required for such websites include but not limited to the standard web tools like HTML, CSS, JS. Historically, static websites generation involved tools used for making complex websites like databases for content handling, preprocessors for generating the HTML content using PHP, serving the content using server all combined in a package called LAMP (Linux Apache MySQL PHP), WAMP (Windows Apache MySQL PHP). Howver, this posed high maintenance overhead in terms of security, upgradation. As a website administrator, a simple no-frills solution with source code based on simple text files was a great boon. Jekyll is one among the new generation of static site generators. What is a dynamic website? Responsive websites which have forms, have preprocessing tools liks PHP What Jekyll is not? Jekyll cannot generator responsive websites. Webpages that enable server side heavy duty programming tasks like cloud computation (what it is #TODO), graphic rendering. As such, it is intended to make websites which are read only, journal keeping as typical in the case of Wordpress-based webpages. Responsiveness from readers can be added in the form of widgets like Disqus widgets. which essentially is a link to the disqus server that does the processing. My feeling is that a java script handles such responses. In that way, Jekyll can partially generate responsive websites with the help of JS Which Jekyll? Jekyll v4 is production ready using HTML5, CSS3 and JS(version ?). Why Jekyll? Why not others? Other static generators like Python based Zim Desktop wiki also generate static sites. However Jekyll offers a seamless integration of desktop and web interfaces in the form of support for Markdown, version control using Git and easy deployment to GitHub for web hosting, and content editing using Atom text editor. What are static assets? HTML, CSS, JS</summary></entry><entry><title type="html">Python Scripts to set static or dynamic IP address</title><link href="/2019/09/30/Scripts-to-set-IP-Address-Statically-or-Dynamically.html" rel="alternate" type="text/html" title="Python Scripts to set static or dynamic  IP address" /><published>2019-09-30T00:00:00+05:30</published><updated>2019-09-30T00:00:00+05:30</updated><id>/2019/09/30/Scripts-to-set-IP-Address-Statically-or-Dynamically</id><content type="html" xml:base="/2019/09/30/Scripts-to-set-IP-Address-Statically-or-Dynamically.html">&lt;p&gt;The reason to set up a &lt;a href=&quot;/2019/08/25/ADSL-modem+router-as-WAP.html&quot;&gt;ADSL router as a switch&lt;/a&gt; was to enhance the WiFi signal at my office desk. However sometimes I need to switch back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;iiscwlan&lt;/code&gt; WiFi interface when I move my laptop.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;setting-dynamic-ip&quot;&gt;Setting dynamic IP&lt;/h1&gt;

&lt;p&gt;Firstly my laptop WiFi adaptor has connected to the &lt;code class=&quot;highlighter-rouge&quot;&gt;wololo&lt;/code&gt; WAP of the ADSL modem+router&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetDynamicIPusingPowershell0.png&quot; alt=&quot;Connected to wololo interface&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Disconnect from the &lt;code class=&quot;highlighter-rouge&quot;&gt;wololo&lt;/code&gt; WAP&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetDynamicIPusingPowershell1.png&quot; alt=&quot;WiFi interface is floating&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enable the &lt;code class=&quot;highlighter-rouge&quot;&gt;WiFi&lt;/code&gt; interface to have DHCP enabled&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Get-NetAdapter -Name WiFi | Set-NetIPInterface -Dhcp Enabled&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetDynamicIPusingPowershell2.png&quot; alt=&quot;DHCP is enabled&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Connect to the &lt;code class=&quot;highlighter-rouge&quot;&gt;iiscwlan&lt;/code&gt; WAP. The DHCP server at &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.240.1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.1&lt;/code&gt; dynamically assigns &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.240.122&lt;/code&gt; IP Address to the WiFi interface having index &lt;code class=&quot;highlighter-rouge&quot;&gt;17&lt;/code&gt; and alias  &lt;code class=&quot;highlighter-rouge&quot;&gt;WiFi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetDynamicIPusingPowershell3.png&quot; alt=&quot;Set IP dynamically&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice the DNS servers set to &lt;code class=&quot;highlighter-rouge&quot;&gt;10.16.25.13&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;10.16.25.15&lt;/code&gt;. However sometimes these are not set and need to be fetched from the DHCP servers&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Set-DnsClientServerAddress -InterfaceIndex 17 -ResetServerAddresses&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetDynamicIPusingPowershell4.png&quot; alt=&quot;Set DHCP servers dynamically&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this way, the IP set dynamically. Thats it!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;setting-static-ip&quot;&gt;Setting static IP&lt;/h1&gt;

&lt;p&gt;Run a powershell as an Administrator and check the interface index for the WiFi interface. The Interface has index &lt;code class=&quot;highlighter-rouge&quot;&gt;17&lt;/code&gt; with alias &lt;code class=&quot;highlighter-rouge&quot;&gt;WiFi&lt;/code&gt;. It is connected to the &lt;code class=&quot;highlighter-rouge&quot;&gt;iiscwlan&lt;/code&gt; WAP using the IP address &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.240.122&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetNetIPConfiguration&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetStaticIPusingPowershell0.png&quot; alt=&quot;Check the interface parameters&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Disconnect from the &lt;code class=&quot;highlighter-rouge&quot;&gt;iiscwlan&lt;/code&gt; WAP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetStaticIPusingPowershell1.png&quot; alt=&quot;Interface is disconnected&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To connect to the &lt;code class=&quot;highlighter-rouge&quot;&gt;wololo&lt;/code&gt; WAP we need to know its network address. We know it belongs to &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.x&lt;/code&gt; network address with the available IP addresss starting from &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.16-255&lt;/code&gt; as the router addresss is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.1&lt;/code&gt;. Let us set the IP address of the &lt;code class=&quot;highlighter-rouge&quot;&gt;WiFi&lt;/code&gt; interface to belong to this range. Let us reserve &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.16&lt;/code&gt; for the desktop computer’s ethernet interface.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;New-NetIPAddress -InterfaceIndex 17 -IPAddress 10.43.79.17 -PrefixLength 24 -DefaultGateway 10.43.79.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This pops a &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows System Error 87&lt;/code&gt; which says that the default Gateway already exists. Let us remove the Default Gateway option and try again&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;New-NetIPAddress -InterfaceIndex 17 -IPAddress 10.43.79.17 -PrefixLength 24&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Again pops up an &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows System Error 87&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetStaticIPusingPowershell2.png&quot; alt=&quot;Set the static IP fails&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To resolve this first connect to the &lt;code class=&quot;highlighter-rouge&quot;&gt;wololo&lt;/code&gt; WAP then execute the command without the default gateway as already the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;iiscwlan&lt;/code&gt; WAP had the same default gateway &lt;code class=&quot;highlighter-rouge&quot;&gt;10.43.79.1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetStaticIPusingPowershell3.png&quot; alt=&quot;Set the static IP passes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We need to set the DNS servers.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Set-DnsClientServerAddress -InterfaceIndex 17 -ServerAddresses 10.16.25.13, 10.16.25.15&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Networking/SetStaticIPusingPowershell4.png&quot; alt=&quot;Set the DNS server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this way, the IP set statically. Thats it!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;setting-the-ip-address-dynamically-using-a-python-script&quot;&gt;Setting the IP address dynamically using a Python script&lt;/h1&gt;

&lt;p&gt;Entering these commands is useful. However due to the correct sequence required as well as accuracy requirements, it is better to have a script individually for the static or dynamic setting of IP addresses.&lt;/p&gt;

&lt;p&gt;Thanks to Python’s scripting capability to handle system command execution, we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;subprocess&lt;/code&gt; module for the task&lt;/p&gt;

&lt;h2 id=&quot;python-script-to-set-static-ip&quot;&gt;Python script to set Static IP&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!python
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'''Script to set Static IP to the WiFi adaptor of laptop.
 so that it belongs to the same network address range
  as that of the WAP of the router configured to work like a switch.'''&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;staticIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''netsh interface ip set address name=&quot;WiFi&quot; static 10.43.79.17 255.255.255.0 10.43.79.1'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;staticDNS1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''netsh interface ip set dns name=&quot;WiFi&quot; static 10.16.25.13'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticDNS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;staticDNS2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''netsh interface ip add dns name=&quot;WiFi&quot; 10.16.25.15 index=2'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticDNS2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;python-script-to-set-dynamic-ip&quot;&gt;Python script to set Dynamic IP&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!python
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'''Script to set Dynamic IP to the WiFi adaptor of laptop
 so that it auto configure to have an IP address that
 belongs to the same network address as that of the iiscwlan WAP.'''&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dhcpCommand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''netsh interface ip set address &quot;WiFi&quot; dhcp'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dhcpCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">The reason to set up a ADSL router as a switch was to enhance the WiFi signal at my office desk. However sometimes I need to switch back to the iiscwlan WiFi interface when I move my laptop. Setting dynamic IP Firstly my laptop WiFi adaptor has connected to the wololo WAP of the ADSL modem+router Disconnect from the wololo WAP Enable the WiFi interface to have DHCP enabled Get-NetAdapter -Name WiFi | Set-NetIPInterface -Dhcp Enabled Connect to the iiscwlan WAP. The DHCP server at 10.43.240.1 and 10.43.79.1 dynamically assigns 10.43.240.122 IP Address to the WiFi interface having index 17 and alias WiFi. Notice the DNS servers set to 10.16.25.13 and 10.16.25.15. However sometimes these are not set and need to be fetched from the DHCP servers Set-DnsClientServerAddress -InterfaceIndex 17 -ResetServerAddresses In this way, the IP set dynamically. Thats it! Setting static IP Run a powershell as an Administrator and check the interface index for the WiFi interface. The Interface has index 17 with alias WiFi. It is connected to the iiscwlan WAP using the IP address 10.43.240.122. GetNetIPConfiguration Disconnect from the iiscwlan WAP. To connect to the wololo WAP we need to know its network address. We know it belongs to 10.43.79.x network address with the available IP addresss starting from 10.43.79.16-255 as the router addresss is 10.43.79.1. Let us set the IP address of the WiFi interface to belong to this range. Let us reserve 10.43.79.16 for the desktop computer’s ethernet interface. New-NetIPAddress -InterfaceIndex 17 -IPAddress 10.43.79.17 -PrefixLength 24 -DefaultGateway 10.43.79.1 This pops a Windows System Error 87 which says that the default Gateway already exists. Let us remove the Default Gateway option and try again New-NetIPAddress -InterfaceIndex 17 -IPAddress 10.43.79.17 -PrefixLength 24 Again pops up an Windows System Error 87 To resolve this first connect to the wololo WAP then execute the command without the default gateway as already the previous iiscwlan WAP had the same default gateway 10.43.79.1 We need to set the DNS servers. Set-DnsClientServerAddress -InterfaceIndex 17 -ServerAddresses 10.16.25.13, 10.16.25.15 In this way, the IP set statically. Thats it! Setting the IP address dynamically using a Python script Entering these commands is useful. However due to the correct sequence required as well as accuracy requirements, it is better to have a script individually for the static or dynamic setting of IP addresses. Thanks to Python’s scripting capability to handle system command execution, we use the subprocess module for the task Python script to set Static IP #!python '''Script to set Static IP to the WiFi adaptor of laptop. so that it belongs to the same network address range as that of the WAP of the router configured to work like a switch.''' import subprocess staticIP = '''netsh interface ip set address name=&quot;WiFi&quot; static 10.43.79.17 255.255.255.0 10.43.79.1''' command1 = staticIP.split() subprocess.run(command1) staticDNS1 = '''netsh interface ip set dns name=&quot;WiFi&quot; static 10.16.25.13''' command2 = staticDNS1.split() subprocess.run(command2) staticDNS2 = '''netsh interface ip add dns name=&quot;WiFi&quot; 10.16.25.15 index=2''' command3 = staticDNS2.split() subprocess.run(command3) Python script to set Dynamic IP #!python '''Script to set Dynamic IP to the WiFi adaptor of laptop so that it auto configure to have an IP address that belongs to the same network address as that of the iiscwlan WAP.''' import subprocess dhcpCommand = '''netsh interface ip set address &quot;WiFi&quot; dhcp''' command = dhcpCommand.split() subprocess.run(command)</summary></entry><entry><title type="html">History of fonts</title><link href="/2019/09/27/fonts.html" rel="alternate" type="text/html" title="History of fonts" /><published>2019-09-27T00:00:00+05:30</published><updated>2019-09-27T00:00:00+05:30</updated><id>/2019/09/27/fonts</id><content type="html" xml:base="/2019/09/27/fonts.html">&lt;h2 id=&quot;history-of-fonts&quot;&gt;History of fonts&lt;/h2&gt;

&lt;p&gt;The origin of fonts dates back to the Egyptian heiroglyphs. Heiroglyph (&lt;em&gt;heiros glypho&lt;/em&gt; meaning sacred carving) forms a set of symbols to represent ideas and emotions. From the symbolic representation of ideas, language was codified using alphabet to have more efficient representation. Alphabet is also a set of symbols. However, they differ from the heiroglyphs in the sense that instead of a single glyph representing a single idea in the case of heiroglyph, an ordered group of glyphs is used to represent an idea. This ordered group of glyph is called a &lt;strong&gt;word&lt;/strong&gt;. Since alphabet need to be carved just the same as heiroglyphs, alphabet provided a freedom of expression allowing slight modifications to the standard template or design allowing designers a medium for expressing sub-emotions and sub-culture. An alphabet with a specific collection of glyphs makes a &lt;strong&gt;font&lt;/strong&gt;. There are other characteristics to glyphs and placement of glyphs. Fonts can be classified based on some characteristics like common glyph template. Such grouping of fonts is called a &lt;strong&gt;typeface&lt;/strong&gt; or &lt;strong&gt;font-family&lt;/strong&gt;. So an &lt;strong&gt;Avenir Light Standard&lt;/strong&gt; belongs to the &lt;strong&gt;Avenir&lt;/strong&gt; typeface/font family which has other fonts like &lt;strong&gt;Avenir Book&lt;/strong&gt;, &lt;strong&gt;Avenir Condensed&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;font-categories&quot;&gt;Font categories&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Vox-ATypI_classification&quot;&gt;Vox-ATypl classification&lt;/a&gt; was first classification of the typefaces carried out in 1954 by Maximillien Vox organizing the typefaces into 10 general categories. Later British Standards based their type classification on the former system and categorized them into 3 classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Classicals which subclassified into Humanist, Garaldes and Transitional&lt;/li&gt;
  &lt;li&gt;Moderns which include Modern Serif, Slab Serif, Grotesque, Neo Grotesque, Geometric Sans, Humanist Sans Serif&lt;/li&gt;
  &lt;li&gt;Calligraphics subdivided into Glyphyic, Script, Graphic, Blackletter and Gaelic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However this classification is subject to interpretation. Some resources classify based on the standard characteristics into Sans Serif, Serif, Slab Serif, Script, Display and Blackletter. &lt;a href=&quot;https://www.azfonts.net/&quot;&gt;A-Zfonts&lt;/a&gt; uses such classification.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;geometric-typefaces&quot;&gt;Geometric typefaces&lt;/h2&gt;

&lt;p&gt;Geometric typefaces take inspiration from elements of geometry; circle, equilateral triangle and square. They are major-sub-classified into&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Geometric Sans which include Avenir, Futura&lt;/li&gt;
  &lt;li&gt;Geometric Slab Serif include Rockwell, Memphis, Stymie&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;poster-typefaces&quot;&gt;Poster typefaces&lt;/h2&gt;

&lt;h2 id=&quot;font-foundries&quot;&gt;Font foundries&lt;/h2&gt;

&lt;p&gt;Adobe, Microsoft, Apple, Monotype are the major foundries.&lt;/p&gt;

&lt;p&gt;Adobe’s famous typefaces include Futura, Helvetica, Avenir,&lt;/p&gt;

&lt;p&gt;Monotype’s famous typefaces include Arial,&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">History of fonts The origin of fonts dates back to the Egyptian heiroglyphs. Heiroglyph (heiros glypho meaning sacred carving) forms a set of symbols to represent ideas and emotions. From the symbolic representation of ideas, language was codified using alphabet to have more efficient representation. Alphabet is also a set of symbols. However, they differ from the heiroglyphs in the sense that instead of a single glyph representing a single idea in the case of heiroglyph, an ordered group of glyphs is used to represent an idea. This ordered group of glyph is called a word. Since alphabet need to be carved just the same as heiroglyphs, alphabet provided a freedom of expression allowing slight modifications to the standard template or design allowing designers a medium for expressing sub-emotions and sub-culture. An alphabet with a specific collection of glyphs makes a font. There are other characteristics to glyphs and placement of glyphs. Fonts can be classified based on some characteristics like common glyph template. Such grouping of fonts is called a typeface or font-family. So an Avenir Light Standard belongs to the Avenir typeface/font family which has other fonts like Avenir Book, Avenir Condensed. Font categories The Vox-ATypl classification was first classification of the typefaces carried out in 1954 by Maximillien Vox organizing the typefaces into 10 general categories. Later British Standards based their type classification on the former system and categorized them into 3 classes: Classicals which subclassified into Humanist, Garaldes and Transitional Moderns which include Modern Serif, Slab Serif, Grotesque, Neo Grotesque, Geometric Sans, Humanist Sans Serif Calligraphics subdivided into Glyphyic, Script, Graphic, Blackletter and Gaelic However this classification is subject to interpretation. Some resources classify based on the standard characteristics into Sans Serif, Serif, Slab Serif, Script, Display and Blackletter. A-Zfonts uses such classification. Geometric typefaces Geometric typefaces take inspiration from elements of geometry; circle, equilateral triangle and square. They are major-sub-classified into Geometric Sans which include Avenir, Futura Geometric Slab Serif include Rockwell, Memphis, Stymie Poster typefaces Font foundries Adobe, Microsoft, Apple, Monotype are the major foundries. Adobe’s famous typefaces include Futura, Helvetica, Avenir, Monotype’s famous typefaces include Arial,</summary></entry><entry><title type="html">Chapter22 Modules The Big Picture</title><link href="/2019/09/14/Chapter22-Modules-The-Big-Picture.html" rel="alternate" type="text/html" title="Chapter22 Modules The Big Picture" /><published>2019-09-14T00:00:00+05:30</published><updated>2019-09-14T00:00:00+05:30</updated><id>/2019/09/14/Chapter22-Modules-The-Big-Picture</id><content type="html" xml:base="/2019/09/14/Chapter22-Modules-The-Big-Picture.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this chapter, the author introduces modules. Modules form the highest organization structure in a Python program. The &lt;em&gt;rationale&lt;/em&gt; behind modules lies in code reusability, a primary feature that Python &lt;em&gt;wants&lt;/em&gt; you to do. Using module as an example for &lt;em&gt;namespace&lt;/em&gt;, the author tries to drive home the point that a program is about managing namespaces, i.e. the space of names. This concept is revisted in other topics like &lt;a href=&quot;chapter-on-functions&quot;&gt;functions&lt;/a&gt; and &lt;a href=&quot;chapter-on-classes&quot;&gt;classes&lt;/a&gt;. This is followed by explaining the internal process when modules are imported, how existing modules are searched, and the freedom of type of module imported.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;module&quot;&gt;Module&lt;/h2&gt;

&lt;h3 id=&quot;what-is-a-module&quot;&gt;What is a module?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Modules serve as the &lt;strong&gt;highest organizational structure&lt;/strong&gt; in the architecture of a Python program. Essentially, a Python program is a system of modules.&lt;/li&gt;
  &lt;li&gt;Modules are glorified namespaces.&lt;/li&gt;
  &lt;li&gt;In concrete terms, a module typically corresponds to a Python file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-use-a-module&quot;&gt;Why use a module?&lt;/h3&gt;

&lt;p&gt;Code reuse&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Modules lets you save code in files permanently. So, code is &lt;em&gt;persistent&lt;/em&gt; unlike the code run in Python interactive prompt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Namespace partitioning&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;As a self contained system of variables/names known as &lt;strong&gt;namespace&lt;/strong&gt;, module minimizes variable name clashes across the program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Implementing shared services or metadata&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A shared resources usually entails a single copy across the system. A module can serve to contain such shared resources like global variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-access-the-module-namespace&quot;&gt;How to access the module namespace?&lt;/h3&gt;

&lt;p&gt;The names of a module &lt;em&gt;namespace&lt;/em&gt; can be accessed/imported by two statements and and one important function&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statement fetches a whole module.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;from&lt;/code&gt; statement fetches particular names from a module.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;imp.reload&lt;/code&gt; function reloads a module without stopping Python.
All names defined at the top level of module file become attributes of the imported module object. In OOP jargon,&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;the module file’s global scope &lt;em&gt;morphs&lt;/em&gt; into the module object’s attribute namespace when it is imported.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-program-architecture&quot;&gt;Python Program architecture&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A program is a system of modules, with one main top-level file and zero or more supplemental files called &lt;em&gt;modules&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The top-level file (a.k.a script) contains the main flow of control of the program.&lt;/li&gt;
  &lt;li&gt;Modules are collections/libraries of tools to be used by the script.&lt;/li&gt;
  &lt;li&gt;Script uses the tools defined in module files, and modules use tools defined in other modules.&lt;/li&gt;
  &lt;li&gt;Module don’t do anything when run directly; they define the tools intended for use in other files.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#TODO&quot;&gt;TODO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/path/to/architecture-image.png&quot; alt=&quot;Image: PythonProgramArchitecture&quot; /&gt;&lt;/p&gt;

&lt;script&gt;
//Run script right away
  window.onload = function () {
//We'll be appending the icon to this DIV later
          var s = Snap(&quot;#iconDiv&quot;);
//Have Snap load the SVG file
    Snap.load(&quot;/assets/images/icon.svg&quot;, function(f) {
//Assign the white rectangle
                whiteRect = f.select(&quot;#whiteRect&quot;);
//Assign the whole icon group
                icon = f.select(&quot;#icon&quot;);
//When the icon is hovered over, have the white rectangle move up slightly with elastic properties
                icon.hover(function() {
        whiteRect.animate({y:270.0}, 500, mina.elastic);
                },
//And return to original position when not hovered over
                           function() {
        whiteRect.animate({y:276.82181}, 500, mina.elastic);
      }
                );
//Finally append the icon to iconDiv in the body
    s.append(f);
    });
  };
&lt;/script&gt;

&lt;!--Here's the DIV that will hold the animated SVG icon--&gt;
&lt;div id=&quot;iconDiv&quot;&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;standard-library-modules&quot;&gt;Standard Library modules&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A Python installation comes with a set of standard library modules (around 200 modules) for various programming tasks like operating system interfaces (&lt;code class=&quot;highlighter-rouge&quot;&gt;os&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sys&lt;/code&gt;), object persistence, text pattern matching (&lt;code class=&quot;highlighter-rouge&quot;&gt;re&lt;/code&gt;), network (&lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt;) and Internet scripting, GUI construction (&lt;code class=&quot;highlighter-rouge&quot;&gt;tkinter&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;They are not part of the Python language, but come installed with a standard Python installation.&lt;/li&gt;
  &lt;li&gt;Due to the standard nature, they are expected to wok portably on most platforms.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;how-imports-work&quot;&gt;How imports work&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;In contrast to C/C++ &lt;code class=&quot;highlighter-rouge&quot;&gt;#include&lt;/code&gt;, which are textual insertions of file into another, Python’s &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; are runtime operations involving
    &lt;ul&gt;
      &lt;li&gt;Find the module’s files.&lt;/li&gt;
      &lt;li&gt;Compile it to byte code (if needed).&lt;/li&gt;
      &lt;li&gt;Run the module code to build the objects it defines.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Finding the module involves searching the &lt;em&gt;module search path&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;On first import, the code is compiled to generate a byte code &lt;code class=&quot;highlighter-rouge&quot;&gt;.pyc&lt;/code&gt; file. Unless the source code is modified, subsequent imports simply reuses the byte code.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.pyc&lt;/code&gt; speed future imports.&lt;/li&gt;
      &lt;li&gt;Compilation happens when file is imported. So the top-level script file is usually not compiled. To have the script file both executed as well as imported, &lt;code class=&quot;highlighter-rouge&quot;&gt;__name__&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__main__&lt;/code&gt; are used.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Running/executing the bytecode &lt;strong&gt;assigns&lt;/strong&gt; names in the importee namespace to the attributes of the imported module object.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;module-search-path&quot;&gt;Module search path&lt;/h3&gt;

&lt;p&gt;Imports mention only the filename without extension, which is searched in a path formed by concatenation of following directories and the left most search result is taken as the file path.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;home directory of the importee files.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PYTHONPATH&lt;/code&gt; directories.&lt;/li&gt;
  &lt;li&gt;Standard library Modules.&lt;/li&gt;
  &lt;li&gt;.pth path file listing custom directories.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;site-packages&lt;/code&gt; subdirectory in the Python installation for listing the third-party extensions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The module search path is assigned to &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; attribute of the &lt;code class=&quot;highlighter-rouge&quot;&gt;sys&lt;/code&gt; standard modules&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since only the filename without extension is searched, an &lt;code class=&quot;highlighter-rouge&quot;&gt;import mod&lt;/code&gt; can resolve to any of the following files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;mod.py&lt;/em&gt; source code file.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;mod.pyc&lt;/em&gt; byte code file.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;mod.pyo&lt;/em&gt; optimized byte code file (Generated when the script is executed using &lt;code class=&quot;highlighter-rouge&quot;&gt;-O&lt;/code&gt; flag).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;mod.so&lt;/em&gt; or &lt;em&gt;mod.dll&lt;/em&gt; compiled extension module which is dynamically linked when imported.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;mod&lt;/em&gt; directory for package imports.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The idea of structuring program is the &lt;em&gt;rationale&lt;/em&gt; behind modules. Modules act as namespaces so that names in one module cannot be seen by another module, unless the former is imported. This Python Program architecture helps in dividing the logic into self-contained components. In addition to the home directory and standard library modules, custom modules can be searched via the module search path setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;PYTHONPATH&lt;/code&gt; environment variable or .pth files in top-level. While importing a module, Pythons allows freedom to choose from a variety of file extensions like .py, .pyc, .pyo, .so or a directory also (as we will see in the &lt;a href=&quot;chapter-on-packages&quot;&gt;next chapter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is a &lt;a href=&quot;/2019/08/30/bananas.html&quot;&gt;link&lt;/a&gt;  that refers to past post.&lt;/p&gt;

&lt;p&gt;The permalink to this page is _posts/2019-09-14-Chapter22-Modules-The-Big-Picture.md&lt;/p&gt;

&lt;p&gt;This is an internal link in Jekyll &lt;a href=&quot;#Module-search-path&quot;&gt;Module Search-Path&lt;/a&gt;&lt;/p&gt;</content><author><name>fubar</name></author><category term="programming" /><summary type="html">Introduction In this chapter, the author introduces modules. Modules form the highest organization structure in a Python program. The rationale behind modules lies in code reusability, a primary feature that Python wants you to do. Using module as an example for namespace, the author tries to drive home the point that a program is about managing namespaces, i.e. the space of names. This concept is revisted in other topics like functions and classes. This is followed by explaining the internal process when modules are imported, how existing modules are searched, and the freedom of type of module imported. Module What is a module? Modules serve as the highest organizational structure in the architecture of a Python program. Essentially, a Python program is a system of modules. Modules are glorified namespaces. In concrete terms, a module typically corresponds to a Python file. Why use a module? Code reuse Modules lets you save code in files permanently. So, code is persistent unlike the code run in Python interactive prompt Namespace partitioning As a self contained system of variables/names known as namespace, module minimizes variable name clashes across the program. Implementing shared services or metadata A shared resources usually entails a single copy across the system. A module can serve to contain such shared resources like global variables. How to access the module namespace? The names of a module namespace can be accessed/imported by two statements and and one important function import statement fetches a whole module. from statement fetches particular names from a module. imp.reload function reloads a module without stopping Python. All names defined at the top level of module file become attributes of the imported module object. In OOP jargon, the module file’s global scope morphs into the module object’s attribute namespace when it is imported. Python Program architecture A program is a system of modules, with one main top-level file and zero or more supplemental files called modules. The top-level file (a.k.a script) contains the main flow of control of the program. Modules are collections/libraries of tools to be used by the script. Script uses the tools defined in module files, and modules use tools defined in other modules. Module don’t do anything when run directly; they define the tools intended for use in other files. TODO Standard Library modules A Python installation comes with a set of standard library modules (around 200 modules) for various programming tasks like operating system interfaces (os, sys), object persistence, text pattern matching (re), network (requests) and Internet scripting, GUI construction (tkinter) They are not part of the Python language, but come installed with a standard Python installation. Due to the standard nature, they are expected to wok portably on most platforms. How imports work In contrast to C/C++ #include, which are textual insertions of file into another, Python’s import are runtime operations involving Find the module’s files. Compile it to byte code (if needed). Run the module code to build the objects it defines. Finding the module involves searching the module search path On first import, the code is compiled to generate a byte code .pyc file. Unless the source code is modified, subsequent imports simply reuses the byte code. .pyc speed future imports. Compilation happens when file is imported. So the top-level script file is usually not compiled. To have the script file both executed as well as imported, __name__ and __main__ are used. Running/executing the bytecode assigns names in the importee namespace to the attributes of the imported module object. Module search path Imports mention only the filename without extension, which is searched in a path formed by concatenation of following directories and the left most search result is taken as the file path. home directory of the importee files. PYTHONPATH directories. Standard library Modules. .pth path file listing custom directories. site-packages subdirectory in the Python installation for listing the third-party extensions. The module search path is assigned to path attribute of the sys standard modules import sys print sys.path Since only the filename without extension is searched, an import mod can resolve to any of the following files: mod.py source code file. mod.pyc byte code file. mod.pyo optimized byte code file (Generated when the script is executed using -O flag). mod.so or mod.dll compiled extension module which is dynamically linked when imported. mod directory for package imports. Summary The idea of structuring program is the rationale behind modules. Modules act as namespaces so that names in one module cannot be seen by another module, unless the former is imported. This Python Program architecture helps in dividing the logic into self-contained components. In addition to the home directory and standard library modules, custom modules can be searched via the module search path setting the PYTHONPATH environment variable or .pth files in top-level. While importing a module, Pythons allows freedom to choose from a variety of file extensions like .py, .pyc, .pyo, .so or a directory also (as we will see in the next chapter). This is a link that refers to past post. The permalink to this page is _posts/2019-09-14-Chapter22-Modules-The-Big-Picture.md/#excerpt This is an internal link in Jekyll Module Search-Path</summary></entry></feed>